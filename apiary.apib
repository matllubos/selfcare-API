FORMAT: 1A
HOST: https://api.client.mallpay.cz/customer/v1

# Self-care API

**Base prefix: /customer/v1**.

# Group My Data
Resources handling information about currently logged-in user. You need valid client [OAuth2 access token](#header-authentication) to access these resources.

# Group Account management
Resource group for managing customer's account.

## Customer login [/account/login]

### Login customer [POST]
Use this endpoint to obtain the access token. There are two possible ways to log in:

#### Classic login
Provide `username` and `password`. `otpCode` may be required for some security reasons.

+ Request customer without revolving account login (application/json; charset=utf-8)
    + `username`: `joe.doe@example.com` (enum, required)
    + `password`: `1234567` (enum, required)

+ Response 200 (application/json; charset=utf-8)
    Access token issued.
    + Attributes (CustomerLoginResult)

+ Request OTP code (application/json; charset=utf-8)
    + `username`: `joe.doe@example.com` (enum, required)
    + `password`: `1234567` (enum, required)

+ Response 480 (application/json; charset=utf-8)
    OTP code sent to customer's phone.
    + Attributes (OTPErrors)

+ Request resend OTP code (application/json; charset=utf-8)
    Request to resend OTP.
    + Attributes (OTPResendRequest)
        + `username`: `joe.doe@example.com` (enum, required)
        + `password`: `1234567` (enum, required)

+ Response 480 (application/json; charset=utf-8)
    OTP has been sent
    + Attributes
        + OTPErrors

+ Request login when OPT required (application/json; charset=utf-8)
    + Attributes  (OTPCodeRequest)
        + `username`: `joe.doe@example.com` (enum, required)
        + `password`: `1234567` (enum, required)

+ Response 200 (application/json; charset=utf-8)
    Access token issued.
    + Attributes (CustomerLoginResult)

+ Response 422 (application/json; charset=utf-8)
    Returned when the `otpCode` authorization does not match.
    + Attributes (Errors)

#### Facebook login
Provide `facebookAccessToken`.

#### Mobile app token login
Provide `mobileToken`.

+ Request (application/json; charset=utf-8)
    + Attributes (CustomerLogin)

+ Response 200(application/json; charset=utf-8)
    Access token issued.
    + Attributes (CustomerLoginResult)

+ Response 422(application/json; charset=utf-8)
    Unable to authenticate the customer. List of error codes special for this endpoint:
    - `CONNECTION_ERROR` - Unable to connect to Facebook or invalid Facebook access token.
    - `INVALID_FACEBOOK_LOGIN` - The Facebook account is not linked to any MALL Pay account. Immediate registration is possible.
    - `INVALID_LOGIN` - Username or password is wrong.
    - `INVALID_MOBILE_LOGIN` - Mobile login token is invalid.
    + Attributes (Errors)

## Customer logout [/account/logout]
Use this resource to invalidate existing token, which in effect logs out the customer.

### Invalidate existing token [DELETE]
+ Request (application/json; charset=utf-8)

+ Response 204 (application/json; charset=utf-8)
    Logout successful.
    + Body

+ Response 403 (application/json; charset=utf-8)
    Customer is not logged in.
    + Attributes (Errors)

## Mobile login token management [/account/mobileToken]
Use this endpoint to generate new `mobileToken` for specified device, used for login in biometric login services. `deviceUuuid` can have variable length (of maximum length 32 characters) with combination of alphanum letters.

### Generate new token [POST]
Use this endpoint to get new mobile login token:
+ Request (application/json; charset=utf-8)
    + Attributes (object)
        + deviceUuid: `a5d46273922540caa2432359367abc5c` (string) - Device UUID.

+ Response 200
    Mobile login token issued.
    + Attributes (CustomerMobileTokenResult)

+ Response 422 (application/json; charset=utf-8)
    Unable to generate a new mobile token:
    - `UUID_NOT_VALID` - UUID provided is not in valid format.
    - `TOKEN_FOR_SAME_UUID_EXISTS` - Mobile token for given UUID already exists. In order to generate a new token one must delete the old token first.
    + Attributes (Errors)

## Mobile login token removal [/account/mobileToken/{deviceUuid}]
Use this endpoint to delete mobile token for specified device, used for login in biometric login services.

### Remove mobile token [DELETE]
Entry of mobile token with given `deviceUuid` will be removed. This combination of `deviceUuid` and `mobileToken` will no longer work to log in.
+ Request (application/json; charset=utf-8)
    + Parameters
        + deviceUuid: `deviceuuid123456789` (string, required) - Device UUID

+ Response 204
    Mobile token asociated with given `deviceUuid` was removed.
    + Body
    
+ Response 404 (application/json; charset=utf-8)
    Device UUID not found.
    + Attributes (Errors)

+ Response 404 (application/json; charset=utf-8)
    Token with given UUID does not exist.
    + Attributes (Errors)

+ Request (application/json; charset=utf-8)
    + Parameters
        + deviceUuid: `bad$device&uuid*format` (string, required) - Bad format of Device UUID

+ Response 422 (application/json; charset=utf-8)
    Unable to find token:
    - `UUID_NOT_VALID` - UUID provided is not in valid format.
    + Attributes (Errors)

## Change password [/account/password]

### Set password [POST]
Use this endpoint to set password of a logged-in customer.
+ Request (application/json)
    + Attributes (object)
        + newPassword: `xt3hP58vouL61H40` (string, required) - New password.


+ Response 204
    Password change successful.
    + Body


+ Response 422 (application/json)
    Password change was not successful.
    - `PASSWORD_TOO_SHORT` - New password is too short.
    - `PASSWORD_NO_LOWERCASE_CHARACTER` - New password must contain lowercase character.
    - `PASSWORD_NO_UPPRECASE_CHARACTER` - New password must contain uppercase character.
    - `PASSWORD_NO_NUMERIC_CHARACTER` - New password must contain numeric character.
    + Attributes (Errors)


### Change password [PUT]
Use this endpoint to change password of a logged-in customer.
+ Request (application/json)
    + Attributes (object)
        + currentPassword: `f2FqYbmQZHXuPbdq` (string, required) - Customer's current password.
        + newPassword: `xt3hP58vouL61H40` (string, required) - New password.


+ Response 204
    Password change successful.
    + Body


+ Response 422 (application/json)
    Password change was not successful.
    - `CURRENT_PASSWORD_WRONG` - Current password is wrong.
    - `NEW_PASSWORD_EQUALS_CURRENT_PASSWORD` - New password is the same as the old password.
    - `PASSWORD_TOO_SHORT` - New password is too short.
    - `PASSWORD_NO_LOWERCASE_CHARACTER` - New password must contain lowercase character.
    - `PASSWORD_NO_UPPRECASE_CHARACTER` - New password must contain uppercase character.
    - `PASSWORD_NO_NUMERIC_CHARACTER` - New password must contain numeric character.
    + Attributes (Errors)


## Password set [/account/password/set]

### Password set [POST]
Use this endpoint to set a new password for:
* new customer (registration)
* existing customer (forgotten password)
+ Request (application/json; charset=utf-8)
    + Attributes (object)
        + password: `f2FqYbmQZHXuPbdq` (string) - New password.
        + token: `a5d46273922540caa2432359367abc5c` (string) - Verification token.
        + consents (array) - List of consents given by customer
            + `REGISTRATION` - Consent with service terms and conditions
            + `MARKETING_EXTENDED` - Consent with extended marketing e-mails

+ Response 204
    Password set successful.
    + Body

+ Request Wrong data (application/json; charset=utf-8)
    + Attributes (object)
        + password: `f2FqYbmQZHXuPbdq` (string) - New password.
        + token: `nonsensetoken` (string) - Verification token.

+ Response 422(application/json; charset=utf-8)
    Password set was not successful.
    + Attributes (Errors)

+ Request Short password (application/json; charset=utf-8)
    + Attributes (object)
        + password: `f2FqYbmQZHXuPbdq` (string) - New password.
        + token: `short` (string) - Verification token.

+ Response 422(application/json; charset=utf-8)
    Password set was not successful.
    + Attributes (Errors)

## Request password reset [/account/password/reset]

### Request password reset [POST]
Use this endpoint to request a password reset. If the request is successful, a verification token will be generated and send to customer's e-mail address as a part of the password reset link. For security reasons, the response will not contain any information if the e-mail was actually sent.

+ Request (application/json; charset=utf-8)
    + Attributes (object)
        + email: `john.doe@yahoo.com` (string) - Customer's e-mail address.
+ Response 204
    Password reset request successful.
    + Body

+ Request Wrong Fields (application/json; charset=utf-8)
    + Body
    ```
            {
            "string": "nonsense"
            }
    ```
+ Response 422 (application/json; charset=utf-8)
    Invalid input data.
    + Attributes (Errors)

+ Request No Data (application/json; charset=utf-8)
    + Body
+ Response 400 (application/json; charset=utf-8)
    Invalid input data.
    + Attributes (Errors)

+ Response 429 (application/json)
    Request throttling in effect.
    + Attributes (Errors)

+ Request Not Found (application/json; charset=utf-8)
    + Attributes (object)
        + email: `john.doe@yahoo.com` (string) - Customer's e-mail address.
+ Response 204 (application/json; charset=utf-8)


## Forgotten e-mail - TBD [/account/forgottenEmail]
Use this resource to remind the customer of his e-mail address (which is needed for login). The e-mail address will be sent to customer's phone via SMS. Customer does not need to be logged in to use this resource.

### Send e-mail address via SMS [POST]
+ Request (application/json)
    + Attributes (object)
        + phone: `+420607123456` (string) - Customer's phone in international format.


+ Response 204
    SMS with e-mail address sent successfully.
    + Body

+ Response 400 (application/json)
    Invalid input data.
    + Attributes (Errors)

+ Response 422 (application/json)
    SMS with e-mail address was not sent. Following errors codes are possible:
    * CUSTOMER_DOES_NOT_EXIST
    + Attributes (Errors)

## Resend registration e-mail [/account/resendRegistrationEmail]

### Resend registration e-mail [POST]
Use this resource to resend a registration e-mail to the customer. E-mail can be resent only in case it was already sent. For security reasons, the response will not contain any information if the e-mail was actually sent.
+ Request (application/json)
    + Attributes (object)
        + email: `john.doe@yahoo.com` (string) - Customer's e-mail address.

+ Response 204
    Registration e-mail was requested to be resent.
    + Body

+ Response 422 (application/json)
    Invalid input data.
    + Attributes (Errors)

+ Response 429 (application/json)
    Request throttling in effect.
    + Attributes (Errors)

## Register customer [/account/registration]

### Register a new customer [POST]
Use this resource to register a new customer. There are two ways of registration:

#### Classic registration
Provide `name`, `email` and `phone`.

#### Facebook registration
Provide `facebookAccessToken` and fields that cannot be retrieved from Facebook. The endpoint will indicate which fields are missing if you call it with `facebookAccessToken` only.

+ Attributes (object)
    + name: `John Doe` (string) - Customer's full name (first and last name).
    + email: `john.doe@yahoo.com` (string) - Customer's e-mail address.
    + phone: `+420777777777` (string) - Customer's phone in international format.
    + facebookAccessToken: `EAADcxbT9khgBAHkik7JGjl9ZCDsiV1TyWpVg4hpV6pUokIxYNPfxksp8S0lxAQz22hqehZBxKDxbZARvsfO9foUxj7uq5gGP3j7aLDCu9ZA9VjSobUU4UdadQUMHtxE2wv1uXxnSnST1SPjDi848VWrXQPkBolceCK5IWUvetVRttwdPrua4N1kVtB6V5uIZD` (string) - Facebook user access token.
    + consents  (array, required) - List of consents given by customer
        + `REGISTRATION` - Consent with service terms and conditions (required)
        + `MARKETING_EXTENDED` - Consent with extended marketing e-mails
    + promoSource: `referral:JNOVAK586` (string) - Contains either promo source URL part or referral code of referrer (should start with `referral:` prefix)
    + cjToken: `1234abcd` (string, optional) - CJEVENT affiliate token. It's obtained from URL parameters - ie. https://mallpay.cz/?cjevent=some-cute-code

+ Request classic registration with referral code (application/json; charset=utf-8)
    + Attributes (object)
        + name: `John Doe`
        + email: `john.doe@yahoo.com`
        + phone: `+420777777777`
        + consents
            + `REGISTRATION`
        + promoSource: `referral:JNOVAK586` (string) - referral code of referrer (customer who send registration link)

+ Response 200 (application/json; charset=utf-8)
    Customer has been registered.
    + Attributes (object)
        + result: `REGISTRATION_FINISHED` (enum, required) - Registration status.
            + `REGISTRATION_FINISH_REQUIRED` - Customer must finish registration by clicking on a link that has been sent to his e-mail address. Might be returned for both types of registration.

+ Request Facebook registration with promo source URL (application/json; charset=utf-8)
    + Attributes (object)
        + facebookAccessToken: `EAADcxbT9khgBAHkik7JGjl9ZCDsiV1TyWpVg4hpV6pUokIxYNPfxksp8S0lxAQz22hqehZBxKDxbZARvsfO9foUxj7uq5gGP3j7aLDCu9ZA9VjSobUU4UdadQUMHtxE2wv1uXxnSnST1SPjDi848VWrXQPkBolceCK5IWUvetVRttwdPrua4N1kVtB6V5uIZD`
        + phone: `+420777777777`
        + consents
            + `REGISTRATION`
        + promoSource: `advertisementYY` (string) - the tag of campaign which redirected the user here

+ Response 200 (application/json; charset=utf-8)
    Customer has been registered.
    + Attributes (object)
        + result: `REGISTRATION_FINISHED` (enum, required) - Registration status.
            + `REGISTRATION_FINISHED` - Registration is finished, immediate login is possible. Returned in case of Facebook registration only.
            + `REGISTRATION_FINISH_REQUIRED` - Customer must finish registration by clicking on a link that has been sent to his e-mail address. Might be returned for both types of registration.

+ Request classic registration with user already registered before (application/json; charset=utf-8)
    + Attributes (object)
        + name: `John Doe`
        + email: `john.doe@yahoo.com`
        + phone: `+420777777777`
        + consents
            + `REGISTRATION`

+ Response 422 (application/json; charset=utf-8)
    Customer has not been registered. List of error codes special for this endpoint:
    - `ALREADY_CONNECTED_NOT_FINISHED` - The Facebook account is already connected to an existing MALL Pay account, but customer must finish registration.
    - `ALREADY_CONNECTED` - The Facebook account is already connected to an existing MALL Pay account. Immediate login is possible.
    - `ALREADY_EXISTS` - MALL Pay account with this email/phone already exists.
    - `CONNECTION_ERROR` - Unable to connect to Facebook or invalid Facebook access token.
    - `EMAILS_DIFFER` - Facebook e-mail address differs from matched MALL Pay account e-mail address.
    + Attributes (Errors)

+ Request Facebook registration with many consequent calls (application/json; charset=utf-8)
    + Attributes (object)
        + facebookAccessToken: `EAADcxbT9khgBAHkik7JGjl9ZCDsiV1TyWpVg4hpV6pUokIxYNPfxksp8S0lxAQz22hqehZBxKDxbZARvsfO9foUxj7uq5gGP3j7aLDCu9ZA9VjSobUU4UdadQUMHtxE2wv1uXxnSnST1SPjDi848VWrXQPkBolceCK5IWUvetVRttwdPrua4N1kVtB6V5uIZD`
        + phone: `+420777777777`
        + consents
            + `REGISTRATION`

+ Response 429 (application/json; charset=utf-8)
    Request throttling in effect.
    + Attributes (Errors)

## Consents [/account/consents]
All consents user is able to subscribe and unsubscribe.

### Available consents [GET]
Get all aconsents a can be subscribed to. Allowed subscriptions are `MARKETING` and `MARKETING_EXTENDED`.

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[Consent], fixed-type, required)

### Change subscription of consents [PUT]
Subscribe or unsubscribe user to filtered consents. Requires user authorization or providing valid verification token as attribute.

feature                         | supported by resource
---                             | ---
[paging](#header-paging)        | no
[sorting](#header-sorting)      | no
[filtering](#header-filtering)  | yes

filter name | possible operators | example
---         | ---                | ---
slug        | eq                 | `consents?filter=slug|eq|MARKETING`  consent with slug `MARKETING`
slug        | in                 | `consents?filter=slug|in|MARKETING,MARKETING_EXTENDED`  consent with slugs `MARKETING` and `MARKETING_EXTENDED`

+ Attributes (object)
    + isSubscribed: `true` (boolean, required) - if is true it will add consents described in filter to the user otherwise it will remove them
    + token: `s5as4d5a6s54d5sa6asd56` (string, optional, nullable) - valid verification token used instead of user authorization

+ Request with authorized user (application/json)
    + Attributes (object)
        + isSubscribed: `true`

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[Consent], fixed-type, required)

+ Request with unauthorized user with valid token (application/json)
    + Attributes (object)
        + isSubscribed: `true`
        + token: `s5as4d5a6s54d5sa6asd56`

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[Consent], fixed-type, required)

+ Request with unauthorized user and invalid token (application/json)
    + Attributes (object)
        + isSubscribed: `true`
        + token: `invalid_token`

+ Response 422 (application/json)
    Unauthorized user and invalid verification token. Following errors codes are possible:
    * UNAUTHORIZED_AND_TOKEN_INVALID
    + Attributes (Errors)

+ Request unknown consent in filter (application/json; charset=utf-8)
    + Parameters
        + filter: `slug|eq|UNKNOWN_CONSENT`

+ Response 400 (application/json; charset=utf-8)
    + Attributes (Errors)

+ Request with bad filter format (application/json; charset=utf-8)
    + Parameters
        + filter: `wrong_filter_name|eq|MARKETING_EXTENDED`

+ Response 400 (application/json; charset=utf-8)
    + Attributes (Errors)

## Push notification devices [/account/push-notification-devices]
Push notification devices for customer.

### Register new device [POST]

+ Request (application/json)
    + Attributes (PushNotificationDeviceToken)

+ Response 204 (application/json; charset=utf-8)

+ Response 422 (application/json; charset=utf-8)
    Push notification device already exists. Following codes are possible.
    * PUSH_NOTIFICATION_DEVICE_EXISTS
    + Attributes (Errors)

## Push notification devices detail [/account/push-notification-devices/{type}/{token}]
Customer push notification device detail.

+ Parameters
    + token (string, required) - Actual token of the device
    + type (enum, required) - Type of the device
        + `ANDROID`
        + `IOS`

### Unregister a device [DELETE]

+ Request (application/json)

+ Response 204 (application/json; charset=utf-8)

+ Response 404 (application/json; charset=utf-8)
    Push notification device does not exist.
    + Attributes (Errors)

+ Response 422 (application/json; charset=utf-8)
    Supplied type of device is invalid. Following errors codes are possible:
    * INVALID
    + Attributes (Errors)

## Referral promo code stats [/account/referral/stats]

### Get referral code stats [GET]
Get referral code information of the customer.

+ Request (application/json; charset=utf-8)
+ Response 200 (application/json; charset=utf-8)
    + Attributes (ReferralCodeStats, required)

## Referral promo code stats by key [/account/referral/{key}/stats]
Referral promo code information found by key of promo code from customer.

+ Parameters
    + key: `JOEDOE123` (string, required) - referral promo code key

### Get referral code stats by key [GET]
Get referral code information by promo code key provided. No authorization is required.

+ Request (application/json; charset=utf-8)
    + Parameters
        + key: `JOEDOE123`

+ Response 200 (application/json; charset=utf-8)
    + Attributes (ReferralCodeStats, required)

+ Request (application/json; charset=utf-8)
    + Parameters
        + key: `INVALID_KEY`

+ Response 404 (application/json; charset=utf-8)

        Promo code with given key not found.

    + Attributes (Errors)

## Referral reward codes [/account/referral/rewards]

### Get referral reward codes received [GET]
Get reward promo codes customer received for each new customer (referee).

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (array[ReferralRewardCodesReceived], required)

# Group Product
Management of applications, services, rewards or billings, transactions and cards from revolving loan.

## Customer account and contract information [/my/contract]
Data of current account or revolving loan contract depending on customer's account type.

### Display contract data [GET]
Returns data of current limits and and eventually loan contract of logged-in user.

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (Contract, required)

## Applications [/my/contract/application]
Applications of logged-in user. The resource providing applications is also running at obsolete URL `/my/contracts/{contractNumber}/applications`.

### Applications of logged-in user[GET]
Get a list of applications of logged-in user.

feature                         | supported by resource
---                             | ---
[paging](#header-paging)        | yes
[sorting](#header-sorting)      | no
[filtering](#header-filtering)  | yes

#### Paging
This resource supports [paging](#header-paging). The attribute `id` will be used as the value for `before` or `after` parameter.

#### Sorting
TBD.

#### Filtering
This resource supports [filtering](#header-filtering). You can use following filters:

filter name     | possible operators | example
---             | ---                | ---
originBillingId |eq                  | `applications?filter=originBillingId|eq|378` applications that was approved at specific billing
originBillingId |isnull              | `applications?filter=originBillingId|isnull|true` applications that was not approved on revolving
isClosed        |eq                  | `applications?filter=isClosed|eq|true` applications that is closed and cannot be shown on the main page

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[Application], fixed-type, required)
        + pagingInfo (PagingInfo, required)

## Application detail [/my/contract/application/{applicationId}]
Specific application. The resource providing application data is also running at obsolete URL `/my/contracts/{contractNumber}/applications/{applicationId}`.

+ Parameters
    + applicationId: `a7718` (string, required) - ID of application

### Application detail [GET]
Get details of one application.

+ Request  (application/json; charset= utf-8)
    + Parameters
        + applicationId: `a7718` (string, required) - ID of application

+ Response 200 (application/json; charset=utf-8)
    Existing application
    + Attributes (Application)

+ Request Non-existing application (application/json; charset=utf-8)
    + Parameters
        + applicationId: `this_is_no_application` (string, required) - ID of application

+ Response 404 (application/json; charset=utf-8)
    Application not found.
    + Attributes (Errors)

### Cancel application [DELETE]
Cancel application processing.

+ Request  (application/json; charset=utf-8)
    + Parameters
        + applicationId: `a7718` (string, required) - ID of application

+ Response 204 (application/json; charset=utf-8)
    Application processing was cancelled.
    + Body

+ Request Invalid application state (application/json; charset=utf-8)
    + Parameters
        + applicationId: `a7718` (string, required) - ID of application

+ Response 422 (application/json; charset=utf-8)
    Application cannot be cancelled.
    + Attributes (Errors)

+ Request non existent application (application/json; charset=utf-8)
    + Parameters
        + applicationId: `a7718` (string, required) - ID of application

+ Response 404 (application/json; charset=utf-8)
    Application cannot be cancelled.
    + Attributes (Errors)

## Application transactions [/my/contract/applications/{applicationId}/transactions]
Specific application.

+ Parameters
    + applicationId: `a7718` (string, required) - ID of application

### Transactions of application [GET]
Get financing transactions of one application.

+ Request  (application/json; charset= utf-8)
    + Parameters
        + applicationId: `a7718` (string, required) - ID of application

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[ApplicationTransaction], fixed-type, required) - List of transactions for application of logged-in user
        + pagingInfo (PagingInfo, required)

+ Request Non-existing application (application/json; charset=utf-8)
    + Parameters
        + applicationId: `this_is_no_application` (string, required) - ID of application

+ Response 404 (application/json; charset=utf-8)
    Application not found.
    + Attributes (Errors)

## Application transaction detail [/my/contract/applications/{applicationId}/transactions/{transactionId}]
Detail of transaction for application of logged-in user.

+ Parameters
    + applicationId: `a7718` (string, required) - ID of application
    + transactionId: `5425` (string, required) - ID of application transaction

### Transaction detail of application [GET]
Get detail of application transaction

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (ApplicationTransaction)

+ Request Non-existing transaction (application/json; charset=utf-8)
    + Parameters
        + applicationId: `a7718` (string, required) - ID of application
        + transactionId: `this_is_no_transaction` (string, required) - ID of application

+ Response 404 (application/json; charset=utf-8)
    Transaction not found.
    + Attributes (Errors)

## Promo codes [/my/contract/application/{applicationId}/applyPromocode]
Customer can apply for discount price by submitting promo code. The resource is also running at obsolete URL `/my/contracts/{contractNumber}/applications/{applicationId}/applyPromocode`.

+ Parameters
    + applicationId: `a7718` (string, required) - ID of application

### Submit promo code [POST]

+ Request  (application/json; charset= utf-8)
    + Parameters
        + applicationId: `a7718` (string, required) - ID of application
    + Attributes (object)
        + code: `MALL1SAW3S0M3` (string, required) - promo code key

+ Response 200 (application/json; charset=utf-8)
    Existing application and valid applicable promo code
    + Attributes (Application)

+ Request Non-existing application (application/json; charset=utf-8)
    + Parameters
        + applicationId: `this_is_no_application` (string, required) - ID of application
    + Attributes (object)
        + code: `MALL1SAW3S0M3` (string, required) - promo code key

+ Response 404 (application/json; charset=utf-8)
    Application not found.
    + Attributes (Errors)

+ Request Invalid promo code (application/json; charset=utf-8)
    + Parameters
        + applicationId: `a7718` (string, required) - ID of application
    + Attributes (object)
        + code: `this_is_invalid_key` (string, required) - promo code key

+ Response 422 (application/json; charset=utf-8)
    Promo code is invalid or expired.
    + Attributes (Errors)

## Application item services [/my/contract/application/item]
Services on given application items. The resource providing services is also running at obsolete URL `/my/contracts/{contractNumber}/application/item`.

feature                       | supported by resource
---                           | ---
[paging](#header-paging)      | yes
[sorting](#header-sorting)    | no
[filtering](#header-filtering)| yes

#### Paging
This resource supports [paging](#header-paging). As a value to `before` and `after` parameters, use `Id` attribute.

#### Filtering
This resource supports [filtering](#header-filtering). You can use following filters:

filter name      | possible operators | example
---              | ---                | ---
data             |in,eq               | `item?filter=data|eq|list_of_item_ids` only items in "list_of_item_ids"
service_active   |in,eq               | `item?filter=service_active|eq|true` only items with active services


### List of application items with services [GET]
Getting list of application item services

+ Response 200 (application/json, charset=utf-8)
    + Attributes (object)
        + `data` (array[Item], required) - List of application order items

## Purchasing services for application items [/my/contract/application/item/service/{serviceId}/purchase]
Purchasing Services on given application items. The resource is also running at obsolete URL `/my/contracts/{contractNumber}/application/item/service/{serviceId}/purchase`.

+ Parameters
    + serviceId: `service-adp` (string, required) - ID of the service

### Purchasing services for application items [POST]
Allows ordering of the service based on previous offer

+ Request (application/json; charset=utf-8)
    Correct request.
    + Parameters
        + serviceId: `service-adp` (string, required) - ID of the service

+ Response 204 (application/json; charset=utf-8)

+ Request Non-existing service (application/json; charset=utf-8)
    + Parameters
        + serviceId: `this_service_does_not_exist` (string, required)

+ Response 404 (application/json; charset=utf-8)
    Service not found.
    + Attributes (Errors)

## Purchasing rewards for application [/my/contract/application/{applicationId}/reward]
Purchasing Rewards on given application items. The resource is also running at obsolete URL `/my/contracts/{contractNumber}/application/{applicationId}/rewards`.

+ Parameters
    + applicationId: `application_id` (string, required) - ID of application

### Purchasing rewards for application order items [POST]
Allows purchasing/ordering of the reward based on info in an application

+ Request (application/json; charset=utf-8)
    Correct request.
    + Parameters
        + applicationId: `application_id` (string, required) - ID of service
    + Attributes
        + type: `FREE_DELIVERY` (enum, required) - type of reward to purchase
            + FREE_DELIVERY
            + SERVICE_DISCOUNT
        + itemId (string, required) - (TODO: business logic is currently not using this ID (will be required for type FREE_DELIVERY in future).)
        + serviceId (string, optional, nullable) - Id of service to purchase reward for

+ Response 200 (application/json; charset=utf-8)
    + Attributes (Application)

+ Request Non-existing application (application/json; charset=utf-8)
    + Parameters
        + applicationId: `this_is_no_application` (string, required) - ID of application
    + Attributes (object)
        + type: `FREE_DELIVERY` (enum, required) - reward type
        + itemId (string, required)

+ Response 404 (application/json; charset=utf-8)
    Application not found.
    + Attributes (Errors)

+ Request Invalid reward type (application/json; charset=utf-8)
    + Parameters
        + applicationId: `a7718` (string, required) - ID of application
    + Attributes (object)
        + type: `this_is_invalid_reward_type` (enum, required) - invalid enum value
        + itemId: `item-id` (string, required)

+ Response 422 (application/json; charset=utf-8)
    Reward not found.
    + Attributes (Errors)

+ Request Cannot apply rewards (application/json; charset=utf-8)
    Request is correct but the reward has already been applied or customer does not have enough coins, etc.
    + Parameters
        + applicationId: `service-adp` (string, required) - ID of service
    + Attributes
        + type: `FREE_DELIVERY` (enum, required) - type of reward to purchase
        + itemId: `itemId` (string, required)

+ Response 422 (application/json; charset=utf-8)
    + Attributes (Errors)

## Request account upgrade [/my/contract/revolvingApplication]
Use this resource to manage customer's requests for upgrading his account type.

### Create account upgrade request [POST]
Use this endpoint to create a new account upgrade request for a logged-in user. The revolving loan application will be created for given type. There should be no existing application.

+ Request Start application process for START account type (application/json; charset=utf-8)
    + Attributes (AccountUpgradeApplicationRequest)
        + type: `START`

+ Response 201 (application/json; charset=utf-8)
    Revolving loan application in progress.
    + Attributes (AccountUpgradeApplicationResponse)
        + type: `START`
        + slug: `CUSTOMER_INFORMATION_CONTACT`

+ Request Start application process without specifying account type (application/json; charset=utf-8)
    + Attributes (AccountUpgradeApplicationRequest)

+ Response 422 (application/json; charset=utf-8)
    Contract type must be specified.
    + Attributes (Errors)

+ Request Starts new application (application/json; charset=utf-8)
    + Attributes (AccountUpgradeApplicationRequest)
        + type: `START`
        + slug: `CUSTOMER_INFORMATION_CONTACT`

+ Response 403 (application/json; charset=utf-8)
    Returned in cases, where the premium account cannot be applied - i.e. another application in progress, account blocked or has unpaid order after due date, for example.
    + Attributes (Errors)

### Update application of account upgrade request [PATCH]
The request will modify the most recent application in progress.

+ Request Updating application which does not exist (application/json; charset=utf-8)
    + Attributes (object)
        + firstName: `John`

+ Response 404 (application/json; charset=utf-8)
    No application in progress for account upgrade exists.
    + Attributes (Errors)

+ Request Providing new data for the next step (application/json; charset=utf-8)
    + Attributes (AccountUpgradeApplicationRequest)
        + firstName: `John`
        + lastName: `Doe`

+ Response 200 (application/json; charset=utf-8)
    Revolving loan application in progress. Next slug `CUSTOMER_INFORMATION_ADDRESS` returned inside body.
    + Attributes (AccountUpgradeApplicationResponse)
        + type: `START`
        + slug: `CUSTOMER_INFORMATION_ADDRESS`
        + firstName: `John`
        + lastName: `Doe`

+ Request with customer younger than 18 years old (application/json; charset=utf-8)
    + Attributes (AccountUpgradeApplicationRequest)
        + dateOfBirth: `2020-01-01`

+ Response 422 (application/json; charset=utf-8)
    The Error return code returned in this case (customer younger that 18) is `UPGRADE_UNAVAILABLE`.
    + Attributes (Errors)

+ Request Bank business card indentification method (application/json; charset=utf-8)
    + Attributes (AccountUpgradeApplicationRequest)
        + kycIdentificationMethod: `BANK_BUSINESS_CARD`

+ Response 200 (application/json; charset=utf-8)
    Bank business card API is called from the backend. Returns back to client information about supported banks (BIC) and URL which are used to render login page to bank account.
    + Attributes (AccountUpgradeApplicationResponse)
        + bankBusinessCard (array, optional)
            + (object)
                + bic: `EQBKCZPP`
                + url: `http://example.com/redirect/connect?redirectId=f277a779-58cf-446c-a163-3ba1c77134ef&bic=eqbkczpp`
            + (object)
                + bic: `AIRACZPP`
                + url: `http://example.com/redirect/connect?redirectId=f277a779-58cf-446c-a163-3ba1c77134ef&bic=airaczpp`

+ Request Invalid proof of income file content (application/json; charset=utf-8)
    + Attributes (object)
        + bankStatements (array[RevolvingLoanDocument])

+ Response 422 (application/json; charset=utf-8)
    File content was evaluated as not supported file type

    + Body

            {
                "errors": [{
                    "message": "Obsah souboru musí být formátu base64",
                    "severity": "ERROR",
                    "attribute": "file.content",
                    "code": "INVALID"
                }]
            }


+ Request Self-employed customer uploads only one proof of income document (application/json; charset=utf-8)
    + Attributes (object)
        + sourceOfIcome: `SELF_EMPLOYED`
        + companyRegistrationNumber: `ABCDE12345`
        + bankStatements (array, RevolvingLoanDocument)
            + file (RevolvingLoanDocument)

    + Body

            {
                "sourceOfIncome: "SELF_EMPLOYED",
                "companyRegistrationNumber": "ABCDE12345,
                "bankStatements": [{
                    "file": {
                        "filename": "doklad1.pdf",
                        "content": "RmlsZSBjb250ZW50cy4gwq9cXyjjg4QpXy/Crw=="
                    }
                }]
            }

+ Response 422 (application/json; charset=utf-8)
    Self-employed customer should provide exactly three proof of income documents.
    + Attributes (Errors)

    + Body

            {
                "errors": [
                    {
                        "message": "OSVČ musí poskytnout právě tři doklady o příjmu.",
                        "severity": "ERROR",
                        "attribute": "bankStatements",
                        "code": "INVALID"
                    }
                ]
            }

+ Request Non self-employed customer uploads more than one proof of income documents (application/json)
    + Attributes (object)
        + sourceOfIcome: `EMPLOYMENT`
        + trialPeriod: `False`
        + bankStatements (array, RevolvingLoanDocument)
            + file (RevolvingLoanDocument)

    + Body

            {
                "sourceOfIncome": "EMPLOYMENT",
                "trialPeriod": false,
                "bankStatements": [{
                    "file": {
                        "filename": "doklad1.pdf",
                        "content": "RmlsZSBjb250ZW50cy4gwq9cXyjjg4QpXy/Crw=="
                    }
                },
                {
                    "file": {
                        "filename": "doklad2.pdf",
                        "content": "RmlsZSBjb250ZW50cy4gwq9cXyjjg4QpXy/Crw=="
                    }
                }
                ]
            }
+ Response 422
    Non self-employed customer should provide exactly one proof of income document.
    + Body

            {
                "errors": [{
                    "message": "Osoba, která není OSVČ, musí poskytnout právě jeden doklad o příjmu.",
                    "severity": "ERROR",
                    "attribute": "bankStatements",
                    "code": "INVALID"
                }]
            }

+ Request Signing contract - request to send OTP (application/json; charset=utf-8)
    The attribute `slug` must be set to `CONFIRMATION_AGREEMENT_SMS`
    + Attributes (OTPRequest)


+ Response 480 (application/json; charset=utf-8)
    OTP has been sent
    + Attributes
        + OTPErrors


+ Request Signing contract (application/json; charset=utf-8)
    Request to resend OTP. The attribute `slug` must be set to `CONFIRMATION_AGREEMENT_SMS`
    + Attributes (OTPResendRequest)

+ Response 480 (application/json; charset=utf-8)
    OTP has been sent
    + Attributes
        + OTPErrors


+ Request Signing contract send OTP (application/json; charset=utf-8)
    The attribute `slug` must be set to `CONFIRMATION_AGREEMENT_SMS`
    + Attributes (OTPCodeRequest)

+ Response 200
    OTP code is valid
    + Attributes
        + AccountUpgradeApplicationResponse (required)

+ Response 422 (application/json)
    Invalid OTP code

    + Body

            {
                "errors": [
                    {
                        "message": "Kód není platný",
                        "severity": "ERROR",
                        "attribute": "otpCode",
                        "code": "INVALID"
                    }
                ]
            }

### State of account upgrade application request [GET]
Get information about current active revolving loan application.

+ Request (application/json; charset=utf-8)

+ Response 200
    + Attributes (AccountUpgradeApplicationResponse)
+ Response 404
    User not yet created account upgrade request.

    + Body
            {
                "errors": [{
                    "message": "Nenalezeno",
                    "severity": "ERROR",
                    "code": "OBJECT_NOT_FOUND"
                }]
            }

+ Response 403 (application/json; charset=utf-8)
    Returned in cases, where the premium account cannot be applied - ie. it has already your account blocked or has unpaid order after due date, for example.
    + Attributes (Errors)

## Revolving loan contract type changes [/my/contract/typeChange]
List of contract type changes

### Display all contract changes [GET]
Returns list of contract type changes of logged-in user.

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[ContractTypeChangeResponse], fixed-type, required) - List of changes

### Change revolving loan contract type  [POST]    
Use this request to change current revolving contract type (upgrade/downgrade)

+ Request (application/json; charset=utf-8)
    Creating a new request for revolving contract type change by sending future type
    + Attributes (object)
        + to: `COMPLETE` (RevolvingLoanContractType, required) - new contract type (use previous contract type in case of reverting)
        + cardDeliveryAddress (Address, optional) - an address where to send a payment card

+ Response 200 (application/json; charset=utf-8)
    + Attributes (ContractTypeChangeResponse, required)

+ Request changes without specifying contract type (application/json; charset=utf-8)
    + Attributes (object)
    
+ Response 422 (application/json; charset=utf-8)
    Missing contract type.
    + Attributes (Errors)

## Last revolving loan contract type change [/my/contract/typeChange/last]
Data about last contract type change

### Get information about last contract type change [GET]
Return last contract type change

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (ContractTypeChangeResponse, required)

+ Response 404 (application/json; charset=utf-8)
    No changes found for the contract
    + Attributes (Errors)    

### Delete last contract type change [DELETE]
Delete last contract type change (revert last change)

+ Request (application/json; charset=utf-8)

+ Response 204 (application/json; charset=utf-8)

+ Response 404 (application/json; charset=utf-8)
    No changes found for the contract
    + Attributes (Errors)

## Monthly billings [/my/contract/billing]
Monthly billings of logged-in user.

feature                         | supported by resource
---                             | ---
[paging](#header-paging)        | yes
[sorting](#header-sorting)      | yes
[filtering](#header-filtering)  | yes

#### Paging
This resource supports [paging](#header-paging). The attribute `id` will be used as the value for `before` or `after` parameter.

#### Sorting
This resource supports sorting according `year` and `month`. Default sorting is according year and month in descending order.
Example: `billing?sort=-year,-month`

#### Filtering
This resource supports filtering.

filter name             | possible operators    | example
---                     | ---                   | ---
hasDebt                 | eq                    | `billing?filter=hasDebt|eq|true` filters billings, where has debt greater than zero (balance > 0)
hasDebt                 | eq                    | `billing?filter=hasDebt|eq|false` filters billings, where has debt less than or equal to zero (balance <= 0)
paymentAvailability     | eq                    | `billing?filter=paymentavailability|eq|AVAILABLE` billings, which are ready to be paid (eg. last month billing, whose balance is not equal to zero)
paymentAvailability     | eq                    | `billing?filter=paymentavailability|eq|NOT_AVAILABLE` billings, which cannot be paid (eg. open billing or billing with zero balance)

### Monthly billings for contract [GET]
Get list of monthly billings for revolving contract of logged-in user

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[BillingResponse], required) - List of monthly billings for contract of logged-in user
        + pagingInfo (PagingInfo, required)

+ Request monthly billings for non-existing contract (application/json; charset=utf-8)

+ Response 404 (application/json; charset=utf-8)
    Contract not found.
    + Attributes (Errors)

## Monthly billing detail [/my/contract/billing/{billingId}]
Detail of monthly billing for revolving contract of logged-in user

### Monthly billing detail for contract [GET]
Get detail of monthly billing

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (BillingResponse)

+ Request for non-existing billing (application/json; charset=utf-8)
    Billing not found
    + Attributes (Error)

## Billing deferment [/my/contract/billing/{billingId}/deferment]
Resource used to defer the billing

### Billing deferment [POST]
Apply for billing deferment

+ Request (application/json)
    Creating new deferment by sending amount to pay in current billing
    + Attributes (Amount)

+ Response 200
    New billing deferment successfully created
    + Attributes (BillingDefermentResponse)

+ Response 422 (application/json)
    Unable to defer the billing
    + Attributes (Errors)

## Billing deferment option [/my/contract/billing/{billingId}/deferment/option]
Billing deferment options

### Billing deferment option [GET]
Get possible deferment for specific amount user want to pay

+ Parameters
    + amount: `125000` (string, required) - Amount user want to pay in current billing

+ Request (application/json; charset=utf-8)
    + Parameters
        + amount: `125000`

+ Response 200 (application/json; charset=utf-8)
    + Attributes (BillingDefermentResponse)

+ Request Providing amount value out of min/max boundary (application/json; charset=utf-8)
    amount parameter is outside allowed boundary
    + Parameters
        + amount: `9000`

+ Response 422 (application/json; charset=utf-8)
    Attribute amount must be between min and max values.
    + Attributes (Errors)
    
## Transactions [/my/contract/transaction]
Transactions for revolving contract of logged-in user.

feature                         | supported by resource
---                             | ---
[paging](#header-paging)        | yes
[sorting](#header-sorting)      | no
[filtering](#header-filtering)  | yes

#### Paging
This resource supports [paging](#header-paging). The attribute `id` will be used as the value for `before` or `after` parameter.

#### Filtering
This resource supports following filtering.

filter name     | possible operators    | example
---             | ---                   | ---
billingId       | eq, in                | `transaction?filter=billingId|in|1,2` all transactions from billings with id 1 and 2
type            | eq, in                | `transaction?filter=type|in|CARD_TRANSACTION_DOMESTIC, CARD_TRANSACTION_ABROAD` transactions, whose type is from the list CARD_TRANSACTION_DOMESTIC, CARD_TRANSACTION_ABROAD
date            | lteq, gteq            | `transaction?filter=date|gteq|2020-05-18;date|lteq|2020-05-20` all transactions created or posted between 18th and 20th May 2020
amount          | lteq, gteq            | `transaction?filter=amount|gteq|150000;amount|lteq|200000` transactions, which have amount greater or equal to 1500,- CZK and less or equal to 2000,- CZK
amount          | abslteq, absgteq      | `transaction?filter=amount|absgteq|150000;amount|abslteq|200000` transactions, which have amount greater or equal to 1500,- CZK and less or equal to 2000,- CZK independently on amount sign (positive or negative), resp. transaction direction(incoming, outgoing)
referenceNumber | eq                    | `transaction?filter=referenceNumber|eq|123456789` transactions, which have reference number equal to 123456789


Fulltext search can be used in transaction endpoint. The system will search for `query_string` in the fields
`merchantName`, `merchantCity`, `description`, `amount`, `partnerName` and `item name`. The search is case insensitive
and does not reflect the accents.

fulltext search  | query string     | example
---              | ---              | ---
fulltext         | `Palladium`      | `transaction?filter=fulltext|icontains|Palladium` transactions, which contain string `Palladium` in fields mentioned above
fulltext         | `550`            | `transaction?filter=fulltext|icontains|550` transactions, which contain string `550` in fields mentioned above, or transactions, which amount is exactly 500,- CZK

### Transactions for revolving contract [GET]
Get list of transactions for revolving contract of logged-in user.

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[RevolvingTransaction], fixed-type, required) - List of transactions for contract of logged-in user
        + pagingInfo (PagingInfo, required)

+ Request transactions for non-existing contract (application/json; charset=utf-8)

+ Response 404 (application/json; charset=utf-8)
    Contract not found.
    + Attributes (Errors)

## Exported transactions [/my/contract/transaction/export]
Exported transactions for revolving contract of logged-in user to a file.

feature                         | supported by resource
---                             | ---
[paging](#header-paging)        | no
[sorting](#header-sorting)      | no
[filtering](#header-filtering)  | yes

#### Filtering
Filtering is the same as in `/my/contract/transaction` endpoint.

### Run transaction export to a file [POST]
Endpoint will generate transaction file in given `format`. The file in given format will be generated in the background. It may not be available for download immediately (when object still has a `state: PROCESSING`).

+ Request Generate xls transaction file (application/json; charset=utf-8)
    + Attributes (object)
        + format: `XLSX` (enum, required) - output file will have given extension
            + `XLSX` - spreadsheet with .xlsx extension(`application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`)


+ Response 201 (application/json; charset=utf-8)
    + Attributes (ExportedFile)

+ Request Generate transaction file in unrecognized format (application/json; charset=utf-8)
    + Attributes (object)
        + format: `unsupported-format`

+ Response 422 (application/json; charset=utf-8)
    File format not supported
    + Attributes (Errors)

## Exported transactions detail [/my/contract/transaction/export/{fileUUID}]

### Get exported transaction file [GET]
Get exported generated transaction file

+ Request Get transaction file (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (ExportedFile)

+ Request Get transaction file already expired or with wrong UUID (application/json; charset=utf-8)

+ Response 404 (application/json; charset=utf-8)
    File not found.
    + Attributes (Errors)


## Transaction detail [/my/contract/transaction/{transactionId}]
Detail of transaction for revolving contract of logged-in user.

### Transaction detail for revolving contract [GET]
Get detail of transaction

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (RevolvingTransaction)

+ Request for non-existing transaction (application/json; charset=utf-8)
   Transaction not found
   + Attributes (Error)

## Transaction complaint [/my/contract/transaction/{transactionId}/complaint]

### Generate complaint for a transaction [POST]
Use this resource to generate new complaint for a transaction

+ Request (application/json; charset=utf-8)
    + Attributes (RevolvingTransactionComplaintRequest)

+ Response 200
    Complaint has been created
    + Attributes (RevolvingTransactionComplaint)

+ Response 422 (application/json; charset=utf-8)
    Invalid input data
    + Attributes (Errors)

+ Request Duplicated transaction ID (application/json; charset=utf-8)
    + Attributes (RevolvingTransactionComplaintRequest)

+ Response 422 (application/json; charset=utf-8)
    Complaint for this transaction has been already created    
    + Attributes (Errors)       

# Group My profile
Resources for accessing and modifying user personal data.

## Facebook connection [/account/facebook]

### Connect facebook account to a customer [POST]
Use this resource to connect facebook account to a customer.

+ Request (application/json)
    + Attributes (object)
        + facebookAccessToken: `EAADcxbT9khgBAHkik7JGjl9ZCDsiV1TyWpVg4hpV6pUokIxYNPfxksp8S0lxAQz22hqehZBxKDxbZARvsfO9foUxj7uq5gGP3j7aLDCu9ZA9VjSobUU4UdadQUMHtxE2wv1uXxnSnST1SPjDi848VWrXQPkBolceCK5IWUvetVRttwdPrua4N1kVtB6V5uIZD` (string, required) - Facebook user access token.

+ Response 204
    Facebook account was connected
    + Body

+ Response 422 (application/json)
    Facebook account was not connected. List of error codes special for this endpoint:
    - `ALREADY_CONNECTED_NOT_FINISHED` - The Facebook account is already connected to an existing MALL Pay account, but customer must finish registration.
    - `ALREADY_CONNECTED` - The Facebook account is already connected to an existing MALL Pay account. Immediate login is possible.
    - `CONNECTION_ERROR` - Unable to connect to Facebook or invalid Facebook access token.
    + Attributes (Errors)

### Disconnect facebook account from a customer [DELETE]
Use this resource to disconnect facebook account from a customer.

+ Response 204
    Facebook account was disconnected
    + Body

+ Response 422 (application/json)
    Facebook account was not connected. List of error codes special for this endpoint:
    - `NOT_CONNECTED` - The Facebook account isn't connected to an the account
    + Attributes (Errors)

## Customer information [/my/profile]
Customer profile information

### Get client information [GET]
Get information about logged-in user.
+ Request (application/json; charset=utf-8)
+ Response 200 (application/json; charset=utf-8)
    + Attributes (Client, required)

+ Response 400 (application/json; charset=utf-8)

        There was an error processing request

    + Attributes (Errors)

## Questionnaire [/my/profile/questionnaire/{hash}/]
Questionnaire for customer

### Get questionnaire data [GET]
Get questions (data) for questionnaire construction
+ Request (application/json; charset=utf-8)
+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + questions (array[Question], fixed-type, required)

+ Response 400 (application/json; charset=utf-8)

        There was an error processing request

    + Attributes (Errors)

## Mobile application rating [/my/profile/feedback/rating]

### Send mobile application rating [POST]
Customer sends application rating.

+ Request (application/json)
    + Attributes (MobileApplicationRating)

+ Response 204 (application/json; charset=utf-8)

## Notification settings [/my/profile/settings/notifications/]

### Get notification settings [GET]
Use this endpoint to inquiry customer's notification settings.

+ Response 200
    + Attributes (object)
        + cardAuthorization: `true` (boolean) - Flag indicating if customer will receive card authorization notifications.

### Set notification settings [PUT]
Use this endpoint to change customer's notification settings.

+ Request (application/json; charset=utf-8)
    + Attributes (object)
        + cardAuthorization: `true` (boolean) - Flag indicating if customer will receive card authorization notifications.

+ Response 200
    Settings were sucessfully saved.
    + Attributes (object)
        + cardAuthorization: `true` (boolean)

# Group Notifications
Resource group for managing customer's notifications.

## List of notifications [/notifications]

feature                         | supported by resource
---                             | ---
[paging](#header-paging)        | yes
[sorting](#header-sorting)      | no
[filtering](#header-filtering)  | yes

#### Paging
This resource supports [paging](#header-paging). The attribute `id` will be used as the value for `before` or `after` parameter.

#### Sorting
Resource does not support manual sorting, default sorting is by `created_at` descending.

#### Filtering
This resource supports [filtering](#header-filtering). You can use following filters:

filter name        | possible operators | example
---                | ---                | ---
id                 |eq,in               | `notifications?filter=id|in|1,3` means notifications that have id 1 or 3
isRead             |eq                  | `notifications?filter=isRead|eq|false` means notifications that have not been read
isTriggered        |eq                  | `notifications?filter=isTriggered|eq|true` means notifications that have been triggered

### Get list of notifications [GET]
Use this endpoint to get list of notifications. This endpoint supports pagination.

+ Request (application/json)
+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[Notification], fixed-type, required)
        + pagingInfo (PagingInfo, required)

### Mark notification as read/triggered [PATCH]
Use this endpoint to indicate, that user has seen the notification(s) and/or interacted with it/them (e.g. he clicked or tapped it).

Use filter (by ID) to limit set of affected notifications.

Use filter by `isTriggered|eq|false` to mark all notifications as read and triggered (acts as "read all" feature). 

+ Request  (application/json; charset=utf-8)
    + Attributes (object)
        + isRead: `true` (boolean) - Mark notification as read (i.e. user has seen the notification)
        + isTriggered: `true` (boolean) - Mark notification as triggered (i.e. user has interacted with the notification, e.g. he clicked or tapped it)
+ Response 204 (application/json; charset=utf-8)

## Number of unread notifications [/notifications/unread]

### Get number of unread notifications [GET]
Use this endpoint to get number of unread notifications.

+ Request (application/json)
+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + count (number) - Number of unread notifications

# Group Personal data
Resource group for managing customer's personal data

## Personal data request [/personalData/request/]

### Personal data request [POST]
Use this endpoint to request personal data operation

+ Request (application/json)
    + Attributes (object)
        + firstName (string) - First name
        + lastName (string) - Last Name
        + email (string, required) - email of person whom wants to process gdpr request
        + subject (string, required) - GDPR request type
        + message (string) - Additional user message for GDPR request

+ Response 200 (application/json)
    GDPR request successfully added, show message about email confirmation
    + Attributes
        + status: `ACCEPTED` (enum, required) - personal data request status
            + `ACCEPTED` - request is accepted
            + `UNCONFIRMED` - request needs to be confirmed via email

+ Response 400 (application/json)
    There was an error processing request
    + Attributes (Errors)

+ Response 422 (application/json)
    Invalid input data.
    + Attributes (Errors)


## Personal request confirm [/personalData/request/{token}/confirm]

Specific customer contract.


### Personal request confirm [POST]
Use this enpoint to confirm personal request operation

+ Attributes (object)
    + token (string, required): `s5as4d5a6s54d5sa6asd56` - GDPR token

+ Response 204
    GDPR request successfull, there is no space for error
    + Body

# Group Payment cards for contract

## Payment Cards for contract [/my/contract/card]
List of payment cards for the given customer contract.

__NOTE:__ The cards are ordered by datetime of their creation, newest first.

### Cards for contract [GET]
Get a list of payment cards associated with the given contract.

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[PaymentCard], fixed-type, required)

## Detail and modification of payment card for contract [/my/contract/card/{cardId}]
Detail of given payment card

### Card for contract [GET]
Get detail of given payment card

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (PaymentCard)


+ Request (application/json; charset=utf-8)

+ Response 404 (application/json; charset=utf-8)
    The card with `cardId` was not found etc.
    + Attributes (Errors)

### Activate card [PATCH]
Activate the given card. When activating the card for the first time, OTP code is required. Can also be used to activate the card after it has been temporarily blocked.

+ Request (application/json; charset=utf-8)
Please note that `otpCode` is required when activating the card for the first time. It is not required when the card is activated from `BLOCKED_TEMPORARILY` state.
    + Attributes (OTPCodeRequest)
        + `state`: `ACTIVATED` (enum, required)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (PaymentCard)


+ Request (application/json; charset=utf-8)
    + Attributes (OTPCodeRequest)
        + `state`: `ACTIVATED` (enum, required)

+ Response 422 (application/json; charset=utf-8)
    Returned when the `otpCode` authorization does not match.
    - `NOT_AUTHORIZED` - Last 4 digits of payment card does not match with otpCode.
    + Attributes (Errors)

+ Request (application/json; charset=utf-8)
    + Attributes (OTPCodeRequest)
        + `state`: `ACTIVATED` (enum, required)

+ Response 422 (application/json; charset=utf-8)
    Returned when card cannot be activated from current state (i.e. BLOCKED_PERMANENTLY).
    - `NOT_SUPPORTED` - Payment card cannot be activated from current state BLOCKED_PERMANENTLY.
    + Attributes (Errors)

+ Request (application/json; charset=utf-8)

+ Response 403 (application/json; charset=utf-8)
    Returned in cases, where the card cannot be activated - ie. it has already been activated and now it is permanently blocked, for example.
    + Attributes (Errors)


+ Request (application/json; charset=utf-8)

+ Response 404 (application/json; charset=utf-8)
    The card with `cardId` was not found etc.
    + Attributes (Errors)


+ Request (application/json; charset=utf-8)
    + Attributes  (OTPCodeRequest)
        + `state`: `ACTIVATED` (enum, required)

+ Response 480 (application/json; charset=utf-8)
    + Attributes (OTPErrors)

### Changing card limits [PATCH]
Change (enable/disable) limits on the card

+ Request (application/json; charset=utf-8)
    + Attributes
        + `onlinePaymentEnabled`: true (boolean, optional, nullable) - Enable/disable online payment with the card. Null value does not change setting and keeps value previously set.
        + `atmWithdrawalEnabled`: true (boolean, optional, nullable) - Enable/disable cash withdrawal from ATMs. Null value does not change setting and keeps value previously set.

+ Response 200 (application/json; charset=utf-8)
    + Attributes (PaymentCard)


+ Request (application/json; charset=utf-8)

+ Response 404 (application/json; charset=utf-8)
    The card with `cardId` was not found etc.
    + Attributes (Errors)


## Card blocking [/my/contract/card/{cardId}/blocking]
Block a card. Two versions are available - permanent and temporary.

### Permanently block a card [POST]
Permanently blocks the card.

__NOTE__: This step cannot be undone.

+ Request (application/json; charset=utf-8)
    + Attributes (PaymentCardPermanentBlocking)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (PaymentCard)


+ Request (application/json; charset=utf-8)

+ Response 404 (application/json; charset=utf-8)
    The card with `cardId` was not found etc.
    + Attributes (Errors)

### Temporarily block a card [POST]
Allows to temporarily block a card, for example when you are not going to use it for a long time or you cannot find it but are not yet sure if it really is lost or stolen (ie when searching for it). Unblocking the card is done by the same method used for activation.

+ Request (application/json; charset=utf-8)
    + Attributes (PaymentCardTemporaryBlocking)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (PaymentCard)


+ Request (application/json; charset=utf-8)

+ Response 404 (application/json; charset=utf-8)
    The card with `cardId` was not found etc.
    + Attributes (Errors)

## Showing a card's PIN number [/my/contract/card/{cardId}/pinView]
Return an URL of an image with the card's PIN number.

### Show card PIN [POST]
Display pin of the card. Returns URL of the image with PIN. The URL is invalidated (ceases to exist) after first GET request.

+ Request (application/json; charset=utf-8)
request confirmation code - second level of authorization
    + Attributes (OTPCodeRequest)

+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + `url`: `https://www.cardprovider_example.com/pin_image_url/image.svg` (string, required) - URL of the PIN image.


+ Request (application/json; charset=utf-8)
    Request with an empty body to send otpCode to a customer. Returns validity of the code sent. When the request is
    repeated and the token from previous request is still valid, the confirmation code is not sent to the customer,
    even though the endpoint responds as usual, with validity of the first confirmation code.
    + Attributes (OTPRequest)

+ Response 480 (application/json; charset=utf-8)
    + Attributes (OTPErrors)

+ Request (application/json; charset=utf-8)
    Request with a parameter `otpResend` forces the endpoint to send the customer new confirmation code, subject to
    rules regarding the frequenecy of calls to the endpoint and number of calls. If these rules are broken, then returns `HTTP 429 (Too Many Requests)`.
    Currently the rules allow the call to be made once in 25s, seven times. After that, it is necessary to wait for time based expiration
    of the first confirmation code sent (time of oldest code sent + 5 minutes).
    + Attributes (OTPResendRequest)

+ Response 480 (application/json; charset=utf-8)
    + Attributes (OTPErrors)

+ Request (application/json; charset=utf-8)
    If resend frequency rules are broken, HTTP 429 will be returned
    + Attributes (OTPResendRequest)

+ Response 429 (application/json; charset=utf-8)
    Returned if endpoint call frequency rules are broken.
    + Attributes (Errors)

+ Request (application/json; charset=utf-8)
    Request with an empty body to send otpCode to a customer. Returns validity of the code sent.
    + Attributes (OTPRequest)

+ Response 422 (application/json; charset=utf-8)
    Returned when card state does not allow PIN retrieval
    + Attributes (Errors)


+ Request (application/json; charset=utf-8)
    + Attributes (OTPCodeRequest)

+ Response 422 (application/json; charset=utf-8)
    Returned when the `otpCode` authorization does not match or card PIN cannot be retrieved due to card state.
    + Attributes (Errors)


+ Request (application/json; charset=utf-8)

+ Response 404 (application/json; charset=utf-8)
    The card with `cardId` was not found etc.
    + Attributes (Errors)


# Group My history data contracts
Set of resources to access and modify client's contracts.

## Applications [/historydata/my/applications]
Applications of given contract.

### Applications on contract [GET]
Get a list of applications on given contract.

feature                         | supported by resource
---                             | ---
[paging](#header-paging)        | yes
[sorting](#header-sorting)      | no
[filtering](#header-filtering)  | yes

#### Paging
This resource supports [paging](#header-paging). The attribute `id` will be used as the value for `before` or `after` parameter.

#### Sorting
TBD.

#### Filtering
This resource supports [filtering](#header-filtering). You can use following filters:

filter name      | possible operators | example
---              | ---                | ---
state            |eq,in               | `applications?filter=state|in|READY` applications that are ready to be financed
stateReason      |eq,in               | `applications?filter=stateReason|in|READY_TO_SHIP` applications that are READY_TO_SHIP
type             |eq,in               | `applications?filter=type|in|INSTALLMENT` applications financed by installment program

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[HistoryApplication], fixed-type, required)
        + pagingInfo (PagingInfo, required)


## Specific application [/historydata/my/applications/{applicationId}]
Specific application.

+ Parameters
    + applicationId: `a7718` (string, required) - ID of application

### Application detail [GET]
Get details of one application.

+ Request (application/json; charset= utf-8)
    + Parameters
        + applicationId: `a7718` (string, required) - ID of application

+ Response 200 (application/json; charset=utf-8)
    Existing application
    + Attributes (HistoryApplication)

+ Request Non-existing application (application/json; charset=utf-8)
    + Parameters
        + applicationId: `this_is_no_application` (string, required) - ID of application

+ Response 404 (application/json; charset=utf-8)
    Application not found.
    + Attributes (Errors)


# Group My Payments

## Payments [/my/payments]
Payments operations.

### Request new payment [POST]
Prepare payment order data for specified repayments. TODO: add payment method.

+ Request TRANSFER/SAZKA (application/json; charset=utf-8)
    + Attributes (PaymentRequest)

+ Response 200(application/json; charset=utf-8)

        Payment order method TRANSFER/SAZKA was prepared and can be paid.

    + Attributes (DomesticPaymentOrder)

+ Request CARD/PLATBA24/MOJE_PLATBA/EKONTO (application/json; charset=utf-8)
    + Attributes (PaymentRequest)

+ Response 200(application/json; charset=utf-8)

        Payment order method CARD/PLATBA24/MOJE_PLATBA/EKONTO was prepared and can be paid.

    + Attributes (OnlinePaymentOrder)


+ Response 400(application/json; charset=utf-8)

        There was an error processing request

    + Attributes (Errors)


## Payment options [/my/payments/options{?amount}]
Get all possible repayment options

+ Parameters
  + amount: 11000 (number, optional) - Amount to pay specified by client, in minor units and default currency (e.g. 11000 means 110 CZK). If set, repayment options will be modified accordingly. NOT SUPPORTED YET.

### Repayment options [GET]
Get prioritized list of possible installments that are available for repayment. If no amount is specified, upper bound of repayment is calculated according to business rules (e.g. including all possible installments).

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[PaymentItem], fixed-type, required)

+ Response 400 (application/json; charset=utf-8)

        There was an error processing request

    + Attributes (Errors)


# Group My Settings

## My settings [/my/settings]
Information about settings

### List of settings [GET]

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (PromoBanner)

# Group My Documents

## Documents for client [/my/documents]
All clients documents for his active revolving loan contract.

### List of documents [GET]
Get a list of documents.

feature                       | supported by resource
---                           | ---
[paging](#header-paging)      | no
[sorting](#header-sorting)    | no
[filtering](#header-filtering)| yes

#### Filtering
This resource supports [filtering](#header-filtering). You can use following filters:

filter name      | possible operators | example
---              | ---                | ---
type             |in,eq               | `documents?filter=type|eq|CONTRACT` only documents of type "Úvěrová smlouva"


+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[RevolvingLoanDocument], fixed-type, required)

# Group MALL Coin

## Client's MALL Coin overview [/coins/overview]
Overview of client's coin account.

### MALL Coin account overview [GET]
Get coin account overview

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + coinBalance: 12500 (CoinAmount, required) - Amount in minor units (12500 represents 125 coins/units)
        + earliestExpiration (EarliestCoinsExpiration, required)


## Client's MALL Coin transactions [/coins/transactions]
Overview of client's MALL Coin transactions.

### MALL Coin transactions list [GET]
Get customer coin transactions list

feature                         | supported by resource
---                             | ---
[paging](#header-paging)        | yes
[sorting](#header-sorting)      | no
[filtering](#header-filtering)  | yes

#### Paging
TBD.
This resource supports [paging](#header-paging). The attribute `id` will be used as the value for `before` or `after` parameter.

#### Sorting
Resource does not support manual sorting, default sorting is by `created_at descending`.

#### Filtering
This resource supports [filtering](#header-filtering). You can use following filters:

filter name        | possible operators | example
---                | ---                | ---
id                 |eq,in               | `transactions?filter=id|in|1,3` transactions that have id 1 or 3
value.amount       |eq,gt,lt            | `transactions?filter=value.amount|gt|0` transactions that have amount higher than 0
transactionReason  |eq                  | `transactions?filter=transactionReason|eq|PAID_ORDER` transactions that were created as a result of order paid
direction          |eq                  | `transactions?filter=direction|eq|CREDIT` transactions by type, credit or debit
isExpired          |eq                  | `transactions?filter=isExpired|eq|0` transactions that are not expired
createdAt          |eq,gt,lt            | `transactions?filter=createdAt|lt|2019-04-10T19:42` transactions by datetime of creation

__Note:__ Filtering by datetime values does not require time to be set, but values of datetime that will not be filled in will be considered to have value of 0. Suppose we have 1 transaction that was created on May 5th, 1976, 04:35 o'clock. Filtering using `createdAt|eq|1976-05-05` term will yield no result, since the transaction was created after `1976-05-05T00:00`. Filtering using `createdAt|gt|1976-05-05` will return the transaction, as will filtering for `createdAt|lt|1976-05-05T04:36`.

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[CoinTransaction], fixed-type, required)
        + pagingInfo (PagingInfo, required)

# Group Rewards

## Partner promocode offers [/rewards/partnerPromocodes/offers]
Partner promocode offers available to customers

feature                         | supported by resource
---                             | ---
[paging](#header-paging)        | yes
[sorting](#header-sorting)      | yes
[filtering](#header-filtering)  | yes

#### Paging
This resource supports [paging](#header-paging). The attribute `id` will be used as the value for `before` or `after`
 parameter.

#### Sorting
Resource supports sorting according `coinsRequired`. Default sorting is by `priority descending, createdAt descending`.
Example: `offers?sort=-coinsRequired`

#### Filtering
This resource supports [filtering](#header-filtering). You can use following filters:

filter name        | possible operators | example
---                | ---                | ---
id                 |eq,in               | `offers?filter=id|in|1,3` promocode offers that have id 1 or 3
categoryId         |eq,in               | `offers?filter=categoryId|in|5,9` promocode offers, whose category has id 5 or 9
partnerId          |eq,in               | `offers?filter=partnerId|in|1,2,5` promocode offers, which are active and whose partner has id 1 or 2 or 5
isPopular          |eq                  | `offers?filter=isPopular|eq|true` active promocode offers, which are currently best-selling
isNew              |eq                  | `offers?filter=isNew|eq|true` active promocode offers, which are new

### Partner promocode offers [GET]
Get list of promocode offers

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[BasicPartnerPromocodeOffer], fixed-type, required) - array of available promocode offers
        + pagingInfo (PagingInfo, required)

## Detail of Partner promocode offer [/rewards/partnerPromocodes/offers/{promocodeOfferId}]
Detail of promocode offer

### Partner promocode offer detail [GET]

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (BasicPartnerPromocodeOffer)

+ Response 404 (application/json; charset=utf-8)
    Non-existing  promocode offer
    + Attributes (Errors)


## Partner promocode purchases [/rewards/partnerPromocodes/purchases/]
Resource to purchase promocode offer or to list already purchased promocodes.

feature                         | supported by resource
---                             | ---
[paging](#header-paging)        | yes
[sorting](#header-sorting)      | yes
[filtering](#header-filtering)  | no

#### Paging
This resource supports [paging](#header-paging). The attribute `id` will be used as the value for `before` or `after` parameter.

#### Sorting
This resource supports sorting according `purchasedAt`. Default sorting is according `id` in descending order.
Example: `rewards/partnerPromocodes/purchases?sort=-purchasedAt`

### Customer partner promocode purchase [POST]
Purchase partner promocode offer

+ Request (application/json; charset=utf-8)
    + Attributes (object)
        + `promocodeId`: `10` (string, fixed-type, required) - pk of the offer the customer wishes to buy

+ Response 201 (application/json; charset=utf-8)
    + Attributes (PurchasedPartnerPromocodeOffer, required)

+ Response 422 (application/json; charset=utf-8)
Purchasing the key was not succesful
    + Attributes (Errors)

### Customer purchased partner promocodes list [GET]
List of purchases partner promocodes

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[PurchasedPartnerPromocodeOffer], fixed-type, required) - array of promocodes and keys purchased by the customer

## Detail of customer purchased partner promocode [/rewards/partnerPromocodes/purchases/{purchasedPartnerPromocodeOfferId}]
Detail of purchased partner promocode

###  Customer purchased partner promocode detail [GET]

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (PurchasedPartnerPromocodeOffer)

## Partner promocode categories  [/rewards/partnerPromocodes/categories]
Partner promocode offer categories

### Partner promocode categories [GET]

feature                         | supported by resource
---                             | ---
[paging](#header-paging)        | yes
[sorting](#header-sorting)      | no
[filtering](#header-filtering)  | no

#### Paging
This resource supports [paging](#header-paging). The attribute `id` will be used as the value for `before` or `after` parameter.

#### Sorting
Resource does not support manual sorting, default sorting is by `name ascending`.

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[PartnerPromocodeCategory], fixed-type, required) - array of available promocode offers
        + pagingInfo (PagingInfo, required)


# Group General
General resources

## Partner [/partners]
Resource for getting partner data. No authorization is required.

### Partner [GET]

feature                         | supported by resource
---                             | ---
[paging](#header-paging)        | yes
[sorting](#header-sorting)      | no
[filtering](#header-filtering)  | yes

#### Filtering
This resource supports [filtering](#header-filtering). You can use following filters:

filter name                 | possible operators | example
---                         | ---                | ---
categoryId                  | eq,in              | `partners?filter=categoryId|in|5,9` partners, whose category has id 5 or 9
isOfferingDeferredPayment   | eq                 | `partners?filter=isOfferingDefferedPayment|eq|true` partner data for partner, which offers deferred payment
isOfferingServices          | eq                 | `partners?filter=isOfferingServices|eq|true` partner data for partner, which offers services
promocodeOfferState         | eq                 | `partners?filter=promocodeOfferState|eq|IN_OFFER` partner data for partner, which has at the moment active partner promocode offer

Fulltext search can be used in this resource. The system will search for `query_string` in the field `name`.
The search is case insensitive and does not reflect the accents.

fulltext search  | query string     | example
---              | ---              | ---
fulltext         | `mall`           | `partners?filter=fulltext|icontains|mall` partners, which contain string `mall` in the name

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[Partner], fixed-type, required) - array of available promocode offers
        + pagingInfo (PagingInfo, required)

## Partner categories  [/partners/categories]
Partner categories

### Partner categories [GET]
feature                         | supported by resource
---                             | ---
[paging](#header-paging)        | no
[sorting](#header-sorting)      | no
[filtering](#header-filtering)  | no

#### Paging
This resource does not support paging.

#### Sorting
Resource does not support manual sorting, default sorting is by `name ascending`.

+ Request (application/json; charset=utf-8)
+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[PartnerCategory], fixed-type, required) - array of available categories

# Group Exchange Rates

## Exchange Rates [/exchangeRates/{date}]
Exchange Rates from CSOB, the {date} attribute is passed through to https://www.csob.cz/portal/lide/kurzovni-listek/-/date/{date}/kurzovni-listek.xml and the resulting xml is returned.


### Exchange Rates for a date [GET]

+ Request (application/json; charset=utf-8)

+ Response 200 (application/xml)
    Exchange Rates XML. See https://www.csob.cz/portal/lide/kurzovni-listek/-/date/2020-01-01/kurzovni-listek.xml for shape of response

+ Response 404 (application/json; charset=utf-8)
    Resource not found.
    + Attributes (Errors)

# Group My contracts - obsolete
Set of resources to access and modify client's contracts.

## Customer contracts [/my/contracts]
Customer contracts.

### List of contracts [GET]
Get a list of customer contracts.

feature                         | supported by resource
---                             | ---
[paging](#header-paging)        | no
[sorting](#header-sorting)      | no
[filtering](#header-filtering)  | no


+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[Contract], fixed-type, required)

## Customer contract detail [/my/contracts/{contractNumber}]
Specific customer contract.

+ Parameters
    + contractNumber: `01-3700227718` (string, required) - ID of contract

### Contract detail [GET]
Get details about one customer contract.

+ Request Get contract details (application/json; charset=utf-8)
    + Parameters
        + contractNumber: `01-3700227718`

+ Response 200 (application/json; charset=utf-8)
   + Attributes (Contract)

+ Request Non-existing contract (application/json; charset=utf-8)
    + Parameters
        + contractNumber: `this_is_no_contract`

+ Response 404 (application/json; charset=utf-8)
    + Attributes (Errors)

## Applications [/my/contracts/{contractNumber}/applications]
Applications of given contract.

+ Parameters
    + contractNumber: `01-3700227718` (string, required) - ID of contract

### Applications on contract [GET]
Get a list of applications on given contract.

feature                         | supported by resource
---                             | ---
[paging](#header-paging)        | yes
[sorting](#header-sorting)      | no
[filtering](#header-filtering)  | yes

#### Paging
This resource supports [paging](#header-paging). The attribute `id` will be used as the value for `before` or `after` parameter.

#### Sorting
TBD.

#### Filtering
This resource supports [filtering](#header-filtering). You can use following filters:

filter name     | possible operators | example
---             | ---                | ---
originBillingId |eq                  | `applications?filter=originBillingId|eq|378` applications that was approved at specific billing
originBillingId |isnull              | `applications?filter=originBillingId|isnull|true` applications that was not approved on revolving
isClosed        |eq                  | `applications?filter=isClosed|eq|true` applications that is closed and cannot be shown on the main page


+ Request Existing contract (application/json; charset=utf-8)
    + Parameters
        + contractNumber: `54307275`

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + data (array[Application], fixed-type, required)
        + pagingInfo (PagingInfo, required)

+ Request Non-existing contract (application/json; charset=utf-8)
    + Parameters
        + contractNumber: `this_is_no_contract`  (string)

+ Response 404 (application/json; charset=utf-8)
    Non-existing contract
    + Attributes (Errors)

## Specific application [/my/contracts/{contractNumber}/applications/{applicationId}]
Specific application.

+ Parameters
    + contractNumber: `01-3700227718` (string, required) - ID of contract
    + applicationId: `a7718` (string, required) - ID of application

### Application detail [GET]
Get details of one application.

+ Request  (application/json; charset= utf-8)
    + Parameters
        + contractNumber: `01-3700227718` (string, required) - ID of contract
        + applicationId: `a7718` (string, required) - ID of application

+ Response 200 (application/json; charset=utf-8)
    Existing application
    + Attributes (Application)

+ Request Non-existing contract (application/json; charset=utf-8)
    + Parameters
        + contractNumber: `this_is_no_contract` (string, required) - ID of contract
        + applicationId: `a7718` (string, required) - ID of application

+ Response 404 (application/json; charset=utf-8)
    Contract not found.
    + Attributes (Errors)

+ Request Non-existing application (application/json; charset=utf-8)
    + Parameters
        + contractNumber: `6605812455` (string, required) - ID of contract
        + applicationId: `this_is_no_application` (string, required) - ID of application

+ Response 404 (application/json; charset=utf-8)
    Application not found.
    + Attributes (Errors)

### Cancel application [DELETE]
Cancel application processing.

+ Request  (application/json; charset=utf-8)
    + Parameters
        + contractNumber: `01-3700227718` (string, required) - ID of contract
        + applicationId: `a7718` (string, required) - ID of application

+ Response 204 (application/json; charset=utf-8)
    Application processing was cancelled.
    + Body

+ Request Invalid application state (application/json; charset=utf-8)
    + Parameters
        + contractNumber: `01-3700227718` (string, required) - ID of contract
        + applicationId: `a7718` (string, required) - ID of application

+ Response 422 (application/json; charset=utf-8)
    Application cannot be cancelled.
    + Attributes (Errors)

+ Request Non-existing contract (application/json; charset=utf-8)
    + Parameters
        + contractNumber: `this_is_no_contract` (string, required) - ID of contract
        + applicationId: `a7718` (string, required) - ID of application

+ Response 404 (application/json; charset=utf-8)
    Contract or application not found.
    + Attributes (Errors)

+ Request non existent application (application/json; charset=utf-8)
    + Parameters
        + contractNumber: `01-3700227718` (string, required) - ID of contract
        + applicationId: `a7718` (string, required) - ID of application

+ Response 404 (application/json; charset=utf-8)
    Application cannot be cancelled.
    + Attributes (Errors)

## Promo codes [/my/contracts/{contractNumber}/applications/{applicationId}/applyPromocode]
Customer can apply for discount price by submitting promo code.

+ Parameters
    + applicationId: `a7718` (string, required) - ID of application

### Submit promo code [POST]

+ Request  (application/json; charset= utf-8)
    + Parameters
        + applicationId: `a7718` (string, required) - ID of application
    + Attributes (object)
        + key: `MALL1SAW3S0M3` (string, required) - promo code key

+ Response 200 (application/json; charset=utf-8)
    Existing application and valid applicable promo code
    + Attributes (Application)

+ Request Non-existing application (application/json; charset=utf-8)
    + Parameters
        + applicationId: `this_is_no_application` (string, required) - ID of application
    + Attributes (object)
        + key: `MALL1SAW3S0M3` (string, required) - promo code key

+ Response 404 (application/json; charset=utf-8)
    Application not found.
    + Attributes (Errors)

+ Request Invalid promo code (application/json; charset=utf-8)
    + Parameters
        + applicationId: `a7718` (string, required) - ID of application
    + Attributes (object)
        + key: `this_is_invalid_key` (string, required) - promo code key

+ Response 422 (application/json; charset=utf-8)
    Promo code is invalid or expired.
    + Attributes (Errors)

## Getting list of application item services [/my/contracts/{contractNumber}/application/item]
Services on given application items

feature                       | supported by resource
---                           | ---
[paging](#header-paging)      | yes
[sorting](#header-sorting)    | no
[filtering](#header-filtering)| yes

#### Paging
This resource supports [paging](#header-paging). As a value to `before` and `after` parameters, use `Id` attribute.

#### Filtering
This resource supports [filtering](#header-filtering). You can use following filters:

filter name      | possible operators | example
---              | ---                | ---
data             |in,eq               | `item?filter=data|eq|list_of_item_ids` only items in "list_of_item_ids"
service_active   |in,eq               | `item?filter=service_active|eq|true` only items with active services

+ Parameters
    + contractNumber: `01-3700227718` (string, required) - ID of contract

### List of application items with services [GET]
Services on given application items

+ Request (application/json; charset=utf-8)
    + Parameters
        + contractNumber: `01-3700227718` (string, required) - ID of contract

+ Response 200 (application/json, charset=utf-8)
    + Attributes (object)
        + `data` (array[Item], required) - List of application order items

+ Request Non-existing contract (application/json; charset=utf-8)
    + Parameters
        + contractNumber: `this_is_no_contract` (string, required) - ID of contract

+ Response 404 (application/json; charset=utf-8)
    Contract not found.
    + Attributes (Errors)

## Purchase services for application item [/my/contracts/{contractNumber}/application/item/service/{serviceId}/purchase]
Purchasing Services on given application items

+ Parameters
    + contractNumber: `01-3700227718` (string, required) - ID of contract
    + serviceId: `service-adp` (string, required) - ID of the service

### Purchase services for application items [POST]
Allows ordering of the service based on previous offer

+ Request (application/json; charset=utf-8)
    Correct request.
    + Parameters
        + contractNumber: `01-3700227718` (string, required) - ID of contract
        + serviceId: `service-adp` (string, required) - ID of the service

+ Response 204 (application/json; charset=utf-8)

+ Request Non-existing contract (application/json; charset=utf-8)
    + Parameters
        + contractNumber: `this_is_no_contract` (string, required) - ID of contract
        + serviceId: `service-adp` (string, required) - ID of the service

+ Response 404 (application/json; charset=utf-8)
    Contract not found.
    + Attributes (Errors)

+ Request Non-existing service (application/json; charset=utf-8)
    + Parameters
        + contractNumber: `01-3700227718` (string, required) - ID of contract
        + serviceId: `this_service_does_not_exist`

+ Response 404 (application/json; charset=utf-8)
    Service not found.
    + Attributes (Errors)

## Purchasing rewards for application [/my/contracts/{contractNumber}/application/{applicationId}/rewards]
Purchasing Rewards on given application items

+ Parameters
    + contractNumber: `01-3700227718` (string, required) - ID of contract
    + applicationId: `application_id` (string, required) - ID of application

### Purchasing rewards for application order items [POST]
Allows purchasing/ordering of the reward based on info in an application

+ Request (application/json; charset=utf-8)
    Correct request.
    + Parameters
        + contractNumber: `01-3700227718` (string, required) - ID of contract
        + applicationId: `application_id` (string, required) - ID of service
    + Attributes
        + type: `FREE_DELIVERY` (enum, required) - type of reward to purchase
            + FREE_DELIVERY
            + SERVICE_DISCOUNT
        + itemId (string, required) - (TODO: business logic is currently not using this ID (will be required for type FREE_DELIVERY in future).)
        + serviceId (string, optional, nullable) - Id of service to purchase reward for

+ Response 200 (application/json; charset=utf-8)
    + Attributes (Application)

+ Request Non-existing application (application/json; charset=utf-8)
    + Parameters
        + applicationId: `this_is_no_application` (string, required) - ID of application
    + Attributes (object)
        + type: `FREE_DELIVERY` (enum, required) - reward type
        + itemId (string, required)

+ Response 404 (application/json; charset=utf-8)
    Application not found.
    + Attributes (Errors)

+ Request Invalid reward type (application/json; charset=utf-8)
    + Parameters
        + applicationId: `a7718` (string, required) - ID of application
    + Attributes (object)
        + type: `this_is_invalid_reward_type` (enum, required) - invalid enum value
        + itemId: `item-id` (string, required)

+ Response 422 (application/json; charset=utf-8)
    Reward not found.
    + Attributes (Errors)

+ Request Cannot apply rewards (application/json; charset=utf-8)
    Request is correct but the reward has already been applied or customer does not have enough coins, etc.
    + Parameters
        + contractNumber: `01-3700227718` (string, required) - ID of contract
        + applicationId: `service-adp` (string, required) - ID of service
    + Attributes
        + type: `FREE_DELIVERY` (enum, required) - type of reward to purchase
        + itemId: `itemId` (string, required)

+ Response 422 (application/json; charset=utf-8)
    + Attributes (Errors)


## Installments [/my/contracts/{contractNumber}/installments{?selection}]
Installments of given contract (installment schedule for CEL contract)

+ Parameters
    + contractNumber: `01-3700227718` (string, required) - ID of contract
    + selection: `current` (enum, optional) - request one specific installment
        + `first` - first installment
        + `previous` - installment preceding current installment (ie. installment with due date in previous month)
        + `current` - current installment (ie. installment with due date in current month)

## Support request [/my/contract/supportRequest]
Request support by phone.

### Support request [POST]
Request Account Upgrade request support by phone.

+ Request (application/json; charset=utf-8)
    + Attributes (SupportRequest)

+ Response 201 (application/json; charset=utf-8)


+ Request (application/json; charset=utf-8)
    Request when customer is not logged in
    + Attributes (SupportRequest)

+ Response 401 (application/json; charset=utf-8)

# Data Structures

## Error (object)
+ code: `ERR_1000_SOME_ERROR_CODE` (string, required) - unique internal error code
+ message: `Some error/validation message description` (string, required) - human readable error description (non-localized)
+ severity (enum, required)
    + ERROR - critical error, execution cannot continue. This MUST be indicated also by appropriate HTTP status code
    + WARN - non-critical error, execution can continue but further user interaction is advisable. This MIGHT be indicated also by appropriate HTTP status code
    + INFO - information only, execution can continue without user interaction
+ attribute: `personalBirthNumber` (string, optional) - json path of request attribute that caused the error (if applicable)
+ ticketId: `UAT1:AMS:20160516-091658.450:45e4` (string, optional) - internal ticket ID, used for error backtracking

## Errors (object)
+ errors (array[Error], fixed-type, required)

## OTPErrors (Errors)
+ otpValidTo: `2017-01-18T10:34:44+01:00` (string, required) - datetime of token validity
+ phone: `+420 737 *** *56` (string, required) - Customer's phone where OTP code was sent. The number is obfuscated if customer's request is not authorized.

## OTPRequest (object)
Request to send customer OTP via SMS.

### Properties

## OTPCodeRequest (object)
Request to send OTP code - customer confirming the action required

### Properties
+ `otpCode`: `abc234` (string) - confirmation code the customer received (usually) by SMS

## OTPResendRequest (object)
Request to re-send customer OTP via SMS

### Properties
+ `otpResend`: `true` (boolean) - forces the resend of the OTP SMS to customer

## PagingInfo (object)
+ itemsPerPage: 10 (number, required) - number of items per page
+ nextPage: `transactions?sort=category&limit=10&after=25` (string, optional) - request to retrieve next page, if it exists and can be unambiguously specified
+ prevPage: `transactions?sort=category&limit=10&before=25` (string, optional) - request to retrieve previous page, if it exists and can be unambiguously specified


## Amount (object)
+ amount: 12590 (number, required) - Amount in minor units (12590 represents 125,90 CZK) [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)
+ currency: `CZK` (string, required) - Amount currency. [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)

## Promocode (object)
+ code: `MALL1SAW3S0M3` (string, required) - Promo code key applied on order.
+ discountPrice (Amount, required) - Promo code discount price of order


## HistoryAmount (object)
+ amount: 12590 (number, optional, nullable) - Amount in minor units (12590 represents 125,90 CZK) [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)
+ currency: `CZK` (string, optional, nullable) - Amount currency. [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)


## VatAmount (Amount)
Financial amount with VAT rate.

### Properties
+ vatRate: 15 (number, required) - VAT rate as natural number (15 represents 15% rate)


## HistoryVatAmount (HistoryAmount)
Financial amount with VAT rate.

### Properties
+ vatRate: 15 (number, optional, nullable) - VAT rate as natural number (15 represents 15% rate)


## TokenCodeRequest (object)
+ grant_type: `authorization_code` (enum, required) - grant flow type, only `authorization_code` and `refresh_token` is supported
    + `authorization_code` - use to exchange code for access token
    + `refresh_token` - can be used to get new access token instead of forcing user to login again
+ client_id: `my_app_id` (string, required) - client_id parameter of your application, received at application registration
+ client_secret: `my_app_secret` (string, required) - client_secret parameter of your application, received at application registration
+ One Of
    + code: `12254a1124` (string, required) - authorization code, received from authorization server
    + refresh_token: `12254a1124` (string, required) - refresh token, received from authorization server

## TokenResponse (object)
+ refresh_token: `7dbadd74c434439db4fc9b2bbf8cabb3` (string, optional) - refresh token, if supported
+ token_type: `bearer` (string, required) - token type. Always "bearer".
+ access_token: `ccafe62cbce645ce95b2acce839f4acc` (string, required) - access token, to be included in API request
+ expires_in: 7200 (number, required) - access token validity, in seconds
## PhoneNumber (object)
+ phoneType: `PRIMARY` (enum, required) - type of phone
    + `PRIMARY` - primary (verified) mobile number (can be `CONTACT` at the same time)
    + `CONTACT` - contact  mobile number
    + `MOBILE` - not primary nor contact mobile number
    + `PHONE` - not primary nor contact phone number
+ countryCode: `+420` (string, optional) - country code, including leading `+`
+ number: `123456789` (string, required) - phone number

## Email (object)
+ type: `PRIMARY_EMAIL` (enum, required) - type of email
    + `PRIMARY_EMAIL`
    + `CONTACT_EMAIL`
+ address: `john.doe@gmail.com` (string, required) - e-mail address

## Address (object)
+ streetAddress: `Na Pankraci` (string, required) - street
+ streetNumber: `5` (string, required) - street number
+ city: `Prague` (string, required) - city
+ zip: `14000` (string, required) - postal code
+ country: `CZ` (string, required) - ISO code of country

## TypedAddress (Address)
+ addressType: `CONTACT` (enum, required) - type of address
    + CONTACT - contact address
    + BILLING - billing address
    + PERMANENT - permanent (residential) address, according to identity document
    + DELIVERY - delivery address
    + COURIER - address, where courier should arrive to verify the customer

## IdentityDocument (object)
+ number: `123456748` (string, required) - identity document number
+ issueDate: `2014-02-10` (string, optional) - identity document issue date
+ validity: `2024-02-10` (string, required) - identity document valid to date
+ type (enum, required) - identity document type
    + `ID_CARD`
    + `PASSPORT`
+ countryIssuedId: `CZ` (string, required) - country that issued the document, ISO 3166 alpha 2 country code

## AccountUpgradeApplicationRequest (object)
+ type (RevolvingLoanContractType, optional)
+ firstName: `John` (string, optional) - user first (given) name
+ lastName: `Doe` (string, optional) - user family name
+ addresses (array[TypedAddress], fixed-type, optional) - client addresses (permanent and delivery)
+ identityDocument (IdentityDocument, optional) - client identity document
+ personalId: `8808308234` (string, optional) - birth number
+ residencePermit (boolean, optional) - residence permit in case of non-Czech citizens
+ gender (enum, optional)
    + `MALE`
    + `FEMALE`
+ dateOfBirth: `1994-02-10` (string, optional) - date of birth in case of non-Czech citizens
+ placeOfBirth: `CZ` (string, optional) - ISO 3166 alpha 2 country code
+ isConsentTelco: `false` (boolean, optional) - consent with Telco scoring in revolving application process
+ typeOfHousing (enum, optional) - type of accommodation
    + OWN
    + RENT
    + MUNICIPAL_HOUSING
    + PARENTS
    + OTHER
+ dependants (enum, optional) - how many people are dependent on client's income
    + ZERO
    + ONE
    + TWO
    + THREE
    + FOUR_AND_MORE
+ sourceOfIncome (enum, optional) - primary source of income
    + EMPLOYMENT
    + MATERNITY_LEAVE
    + SELF_EMPLOYED
    + RETIREMENT
    + OTHER
+ trialPeriod (boolean, optional) - trial period in case of employment source of income
+ companyName: `Some Super Company` (string, optional) - name of company
+ companyRegistrationNumber (string, optional) - ICO in case of self-employed source of income
+ monthlyNetIncome (Amount, optional) - net income amount per month (for all income sources but self-employed)
+ quarterlyGrossIncome (Amount, optional) - gross income amount per three months (for self-employed income source)
+ monthlyLoanExpenses (Amount, optional) - loan expenses per month
+ monthlyRegularExpenses (Amount, optional) - regular expenses per month (food, accommodation, etc.)
+ bankStatements (array[RevolvingLoanDocument], optional)
+ cardLimitSelected (Amount, optional) - card limit chosen by customer
+ accountingSystem (enum, optional) - required in case of self-employed source of income
    + TAX_RECORD
    + DOUBLE_ENTRY
    + PERCENT_FROM_INCOME
+ scopeOfBusiness (enum, optional) - required in case of self-employed source of income
    + CRAFTING
    + FARMING
    + RETAIL
    + BOUND
    + FINANCE
    + REAL_ESTATE
    + TRANSPORT
    + RESTAURANT
    + MILITARY
    + INDEPENDENT
    + MEDICINE
    + PROFESSIONS
    + ACCOUNTING
    + OTHERS
+ startOfBusiness: `1994-02-10` (string, optional) - since when is the business running, required in case of self-employed source of income
+ otpCode (string, optional) - SMS code to sign the contract
+ kycIdentificationMethod (enum, optional) - how the client's identity will be verified
    + BANK_BUSINESS_CARD
    + COURIER
    + OFFICE
+ courierArrivalDate: `2019-01-01` (string, optional) - date when courier should arrive to verify the customer
+ bankBusinessCardReturnUrl: `https://www.mallpay.cz/application` (string, optional) - Callback URL after redirection from Bank Business Card.

## AccountUpgradeApplicationSlug (enum)
+ CUSTOMER_INFORMATION_CONTACT
+ CUSTOMER_INFORMATION_ADDRESS
+ CUSTOMER_INFORMATION_ID
+ CUSTOMER_INFORMATION_TYPES_OF_HOUSING
+ CUSTOMER_INFORMATION_DEPENDANTS
+ INCOME_AND_EXPENSES_SOURCE_OF_INCOME
+ INCOME_AND_EXPENSES_INCOME_CONFIRMATION
+ SCORING_LOADING
+ CONFIRMATION_LIMIT
+ CONFIRMATION_INCOME_STATEMENT_UPLOAD
+ CONFIRMATION_IDENTIFICATION
+ BANK_BUSINESS_CARD_VERIFICATION_FAILED
+ CONFIRMATION_AGREEMENT_SMS
+ COMPLETED
+ CANCELLED
+ DECLINED_GENERAL
+ DECLINED_SCORING_REGISTERS
+ TECHNICAL_ERROR

## BankBusinessCardRedirectionLogin (object)
+ bic (enum, required) - BIC of bank
    + AIRACZPP - Air bank
    + AGBACZPP - MONETA Money Bank
    + CEKOCZPP - ČSOB
    + EQBKCZPP - Equa bank
    + FIOBCZPP - Fio banka
    + GIBACZPX - Česká spořitelna
    + KOMBCZPP - Komerční banka
+ url (string, required) - URL where is the user redirected to log-in and authenticate to the bank

## AccountUpgradeApplicationResponse (AccountUpgradeApplicationRequest)
+ email (string, optional) - client e-mail address
+ phoneNumber (string, optional) - client phone number
+ bankStatementMonth: `4` (number, optional) - number between 0 and 11 (0 - January, 11 - December), represents the month for which non self-employed customer must provide bank statement
+ bankStatementYear: `2019` (number, optional) - number representing the year for which non self-employed customer must provide bank statement
+ cardLimitMaxAllowed (Amount, optional) - card limit allowed
+ bankBusinessCard (array[BankBusinessCardRedirectionLogin], optional)
+ slug (AccountUpgradeApplicationSlug, optional) - current view with form which should be displayed
+ isCourierFinished (boolean, optional) - information, whether the identification by courier is already finished. In combination with type this field determines, which screen should be displayed in case COMPLETED slug is returned.
+ unsignedContractHtml (string, optional) - unsigned contract in escaped HTML

## RevolvingLoanContractType (enum)
+ START
+ PLUS
+ COMPLETE

## RevolvingLoanContractFee (object)
+ value (Amount, required) - fee value
+ createdDate: `2020-03-01` (string, required) - date when fee is created
+ dueDate: `2020-04-20` (string, required) - fee due date, usualy due date of a monthly billing the fee falls into

## RevolvingLoanContractTrialInfo (object)
+ totalMonths: `3` (number, required) - free trial period - total length in months
+ remainingMonths: `2` (number, required) - free trial period - remaining length in months
+ expiresAt: `2020-02-29` (string, required) - last date of free trial period

## ContractTypeChangeResponse (object)
+ status: `DONE` (enum, required) - status of contract change application
    + `CANCELLED`
    + `DONE`
    + `WAITING`
    + `PROCESSING`
+ direction: `DOWNGRADE` (enum, required)
    + `DOWNGRADE`
    + `UPGRADE`  
+ createdDate: `2020-02-15` (string, required) - date the change type application has been created 
+ processedDate: `2020-03-01` (string, optional) - date the change type application has been processed ('status = DONE'), 1st of the next month for downgrades, date of creating for upgrades 
+ from: `PLUS` (RevolvingLoanContractType, required) - previous contract type
+ to: `START` (RevolvingLoanContractType, required) - new contract type (current contract type in case of upgrade)
+ fee (RevolvingLoanContractFee, required) - default monthly fee for new contract type
+ aliquot (RevolvingLoanContractFee, optional) - aliquot value in case of upgrade
+ cardDeliveryAddress (Address, optional) - an address where to send a payment card

## BillingResponse (object)
+ additionalInfoDeferment (BillingDefermentInfoResponse, required) - information about possibilities for defer the billing payment
+ balance (Amount, required) - billing balance
+ coinReward (CoinAmount, required) - Amount of coins, which customer get for paying the billing
+ dueDate: `2020-05-20` (string, required) - billing due date
+ id: `378` (string, required) - billing id
+ hasDebt (boolean, required) - billing has debt
+ isPaid (boolean, required) - information, whether the billing balance less than or equal to zero and was paid by customer transaction
+ month: `4` (number, required) - month of the billing, 0 represents January, 1 - February
+ paymentAvailability (PaymentAvailability, required) - information about possibility to pay for the billing
+ year: `2020` (number, required) - year of the billing

## BillingDefermentResponse (object)
+ billingBalance (Amount, required) - Amount user want to pay in current billing
+ billingDefermentCount (number, required) - Number of billing deferments user already applied for
+ coinReward (Amount, required) - Amount of MALL coins user will gain paying amountToPay
+ fee (Amount, required) - Fee for deferring the billing
+ feeDiscount (Amount, optional) - Fee discount
+ totalValue (Amount, required) - Amount added to following billing (ie. deferred amount including the fee)
+ value (Amount, required) - Portion of current billing deferred into following billing

## BillingDefermentInfoResponse (object)
+ deferment (BillingDefermentResponse, optional) - deferment values (WAITING_FOR_PAYMENT or SUCCESS state)
+ maximum (Amount, optional) - maximal amount, which can be deferred in the monthly billing
+ minimum (Amount, optional) - minimal amount, which can be deferred in the monthly billing
+ state: `AVAILABLE` (enum, required) - state of deferment
    + `AVAILABLE` - deferment is available
    + `NOT_AVAILABLE` - deferment os not available, more info about why is in stateReason
    + `WAITING_FOR_PAYMENT` - deferment has been created, but the billing is not yet paid
    + `SUCCESS` - deferment has been created and the billing is paid
+ stateReason: `AMOUNT_TO_PAY_TOO_LOW` (enum, optional) - reasons for UNAVAILABLE state
    + `AMOUNT_TO_PAY_TOO_LOW` - unable to defer because amount to pay is lower than minimal payable amount
    + `BILLING_PAYMENT_OVERDUE` - unable to defer because it is past due date and the billing is still unpaid
    + `BILLING_NOT_CLOSED` - unable to defer because monthly billing is not yet closed

## RevolvingTransaction (object)
+ id: `2070` (string, required) - transaction id
+ amount (Amount, required) - transaction amount in the currency of the card account
+ type: `CARD_TRANSACTION` (enum, required) - transaction type
    + `CARD_TRANSACTION` - Card POS
    + `CARD_ATM_WITHDRAWAL` - ATM withdrawal
    + `CARD_ONLINE` - Cardholder not present - online, e-commerce
    + `CARD_OTHER` - Cardholder not present - other
    + `CARD_REFUND_MERCHANT` - Refund by merchant
    + `CARD_REFUND_COMPLAINT` - Refund by complaint
    + `CARD_MONEYBACK_MASTERCARD_SPECIALS` - MoneyBack - "Cashback Mastercard priceless specials"
    + `CARD_ATM_WITHDRAWAL_FEE` - ATM withdrawal fee
    + `CARD_REVERSAL` - Transaction storno
    + `DEFERRED_PAYMENT` - New order (deferred payment)
    + `DEFERRED_PAYMENT_PROMOCODE` - Applied promocode to order (deferred payment)
    + `DEFERRED_PAYMENT_RETURN` - Returned order (partly or whole)
    + `DEFERRED_PAYMENT_FREE_DELIVERY` - Applied free delivery discount  to order (deferred payment)
    + `DEFERRED_PAYMENT_OTHER` - Any other transaction related to order.
    + `DEFERRED_BILLING_PAYMENT_TO_NEXT_MONTH` - Deffered payment for billing - transaction that moves debt to next month.
    + `DEFERRED_BILLING_PAYMENT_FROM_PREVIOUS_MONTH` - Deffered payment for billing - transaction that moves debt to next month.
    + `DEFERRED_BILLING_PAYMENT_FEE` - Deferred payment for billing - fee
    + `FEE` - fee
    + `CUSTOMER` - customer repayment
    + `SANCTION` - sanction
    + `MONEYBACK` - MoneyBack
    + `OTHER` - any other transaction
+ createdDate: `2020-05-20` (string, required) - date, on which transaction was created
+ postingDate: `2020-05-21` (string, optional) - date, on which transaction was posted
+ referenceNumber (string, optional) - transaction reference number
+ billingId: `189` (string, required) - billing id transaction belongs to
+ description (string, optional) - transaction description
+ fees (array[TransactionFee], optional) - array of fees related to the transaction
+ additionalInfoCard (RevolvingTransactionInfoCard, optional) - card payment additional info (card number, mcc and merchant name) in case of card payment otherwise is null
+ additionalInfoForeign (RevolvingTransactionInfoForeign, optional) - foreign payment additional info (original amount and exchange rate) if the transaction was paid in foreign currency otherwise is null
+ additionalInfoApplication (RevolvingTransactionInfoApplication, optional) - application additional information for transaction related to deferred payment
+ additionalInfoDeferredBilling (RevolvingTransactionInfoDeferredBilling, optional) - deferred billing transaction info if this transaction deferred monthly payment otherwise is null. In case the payment was deferred the payable amount have been transferred to next billing with `id` equal to `billingId`.
+ documents (array[RevolvingTransactionDocument], fixed-type, optional) - Attached documents (fees etc.)

## TransactionFee (object)
+ amount (Amount, required) - fee amount
+ code: `0` (number, optional) - fee transaction code
+ type: `CARD_ATM_WITHDRAWAL` (enum, required) - fee type
    + `CARD_ATM_WITHDRAWAL` - fee for ATM withdrawal
    + `OTHER` - other fee type
+ description (string, optional) - fee description

## RevolvingTransactionInfoCard (object)
+ maskedPan:`123456******1234` (string, required) - masked PAN of the card
+ mcc: `3081` (string, optional) - merchant category code
+ merchantName: `A3 Sport Palladium` (string, optional) - merchant name
+ merchantCity: `Praha1` (string, optional) - merchant city
+ merchantCountry: `CZ` (string, optional) - merchant country

## RevolvingTransactionInfoForeign (object)
+ sourceAmount (Amount, required) - transaction amount in the original currency
+ exchangeRate: `26.5` (string, required)- exchange rate, which is calculated as amount / sourceAmount, the number can have 8 decimal places

## RevolvingTransactionInfoApplication (object)
+ applicationId (string, required) - application id
+ orderState: `REJECTED` (OrderState, required) - order state
+ partnerName (string, required) - partner name
+ partnerLogo (File, optional) - partner logo

## RevolvingTransactionInfoDeferredBilling (object)
+ id (string, required) - id of billing whose payment have been deferred to the next billing

## RevolvingTransactionComplaintRequest (object)
+ reason: `Zneužití platební karty` (string, required) - complaint main reason
+ reasonDescription: `Karta mi byla odcizena nebo ztracena. Prohlašuji, že jsem výše uvedenou transakci neuskutečnil/a a ani k ní nedal/a souhlas` (string, required) - detail description of complaint reason
+ reasonAdditionalInfo: `Kartu jsem natrvalo uzamknul/a` (string, optional) - additional info to complaint reason
+ attachments (array[File], optional) - complaint attachments
+ comment: `Complaint` (string, optional) - user comment

## RevolvingTransactionComplaint (RevolvingTransactionComplaintRequest)
+ id:`1020` (string, required) - complaint id
+ transactionId:`2020` (string, required) - id of related transaction
+ createdDate: `2020-05-20` (string, required) - date, on which complaint was created

## AccountType (enum)
+ TRY_IT - basic account with maximum limit of 5000 CZK
+ START - revolving loan account (no card is provided) with limit up to 50 000 CZK
+ PLUS - basic revolving loan with card and limit up to 50 000 CZK
+ COMPLETE - revolving loan account with card, limit up to 50 000 CZK and bonuses eg. free delivery,...

## Client (object)
+ id: `12345` (number, required) - internal customer ID
+ name (object, required)
    + titleBefore: Ing. (string, optional) - academical degree before name
    + titleAfter: PhD. (string, optional) - academical degree behind name
    + firstName: John (string, required) - user first (given) name
    + middleNames: Peter, Frank (array[string], optional) - middle names
    + lastName: Doe (string, required) - user family name
+ fullName: `Ing. John Petetr Frank Doe, PhD.` (string, optional) - client full name
+ salutation: Mr. (string, optional, nullable) - salutation, e.g. Mr. or Mrs.
+ gender: `MALE` (enum, required)
    + `MALE`
    + `FEMALE`
+ birthDate: `1978-02-15` (string, required) - date of birth
+ addresses (array[TypedAddress], fixed-type, optional) - client addresses (permanent, delivery, courier)
+ phoneNumbers (array[PhoneNumber], fixed-type, required) - client phone numbers
+ emails (array[Email], fixed-type, required) - client e-mail addresses. Can be empty array. There can be only one email of given type.
+ facebookUserId: `1837454442945293` (string, optional) - client's facebook user id
+ username: `memyself@mine.com` (string, required) - client's self care zone username
+ hasSetPassword (boolean, required) - indicates whether the client has set password or not. Ie. user registered via Facebook has `hasSetPassword` as `false`.
+ accountType (AccountType, required) - client's account type
+ options (object, required) - client's options
    + canApplyForRevolvingContract (boolean, required) - indicates whether the client can apply for revolving loan contract or not

## Contract (object)
+ type (AccountType, required) - account type
+ availableAmount (Amount, required) - available amount of an account
+ totalLimit (Amount, required) - total limit of an account
+ availableAnnualAmount (Amount, optional) - available annual amount of an account (only for non premium account)
+ totalAnnualLimit (Amount, optional) - total annual limit of an account (only for non premium account)
+ availableAmountState: `AVAILABLE` (enum, required) - state of available amount
    + `AVAILABLE` - the customer has available amount to spend
    + `EXHAUSTED` - the limit was exhausted, the customer has spent the whole available amount
    + `BLOCKED` - the available amount was blocked because customer is blocked
+ revolvingLoanContractAdditionalInfo (object, required, nullable) - additional information for client with revolving loan
    + state: `ACTIVE` (enum, required) - state of loan contract
        + `PROCESSING`
        + `WAITING_FOR_SIGNATURE`
        + `CANCELLED_BEFORE_SIGNING`
        + `SIGNED`
        + `ACTIVE`
        + `RESIGNED`
    + applicationState: `PROCESSING` (enum, required) - state of loan application
        + `PROCESSING`
        + `FINISHED`
        + `CANCELLED`
        + `REJECTED`
        + `ERROR`
    + cancellationReason (enum, optional, nullable)
        + `BACKOFFICE`
        + `CUSTOMER`
    + fee (RevolvingLoanContractFee, optional) - value - fee value for current month, aliquot value in case of upgrade; createdDate - date when fee was created; dueDate - fee due date (monthly billing due date) in case that contract is not active, the fee can be omitted;
    + trialInfo (RevolvingLoanContractTrialInfo, optional) - info about trial period, is null when customer is not in free trial period yet or free trial period expired
    + currentMonthLastContractTypeChange (ContractTypeChangeResponse, optional) - info about last change done in current month (is defined only when user is in downgrade/upgrade process, is undefined the month after downgrade/upgrade process)

## HistoryContract (object)
+ contractNumber: `12345678` (string, required) - ID of a contract
+ applicationCreatedAt: `2016-01-01` (string, required) - date when application was created
+ status: `ACTIVE` (enum, required) - status of contract
    + `PROCESSING` - contract is approved
    + `ACTIVE` - contract is active (DEFPAY user is not banned and active)
    + `FINISHED` - contract has been closed (DEFPAY user is banned or inactive)
    + `CANCELLED` - contract has been cancelled


## AccountNumber (object)
+ One Of
    + Properties
        + `iban`: `CZ123456789` (string, required) - account number in IBAN format
        + `bic`: `AIRACZPP` (string, optional) - BIC for account
    + Properties
        + `prefix`: `000000` (string, optional) - account number prefix
        + `accountNumber`: `1235335010` (string, required) - account number. For domestic accounts, this will be specified in national format.
        + `bankCode`: `3030` (string, required) - for domestic accounts, bank code in national format


## Transaction (object)
+ id: `12312345` (string, required) - internal transaction identifier
+ createdAt: `2017-01-18T10:34:44+01:00` (string, required) - date of transaction creation
+ value (Amount, required) - amount & currency used for bookkeeping (e.g. amount in account's currency). Can be negative e.g. if something was withdrawn from an account. Original transaction amount and currency will be specified in `additionalInfo` object if applicable
+ direction: `CREDIT` (enum, required) - direction of transaction
    + `CREDIT` - credit transaction (+)
    + `DEBIT` - debit transaction (-)

## MoneyTransactionInfoDomestic (object)
+ constantSymbol: `0558` (string, optional)
+ variableSymbol: `9` (string, optional)
+ specificSymbol: `100011` (string, optional)

## File (object)
+ filename: `invoice.pdf` (string, optional) - File name.
+ createdDate : `2017-01-18T10:34:44+01:00` (string, optional) - Date and time of file creation
+ contentType : `image/jpg` (string, optional) - content type of the file
+ size : 48439 (number, optional) - file size in bytes
+ One Of
    + `content`: `RmlsZSBjb250ZW50cy4gwq9cXyjjg4QpXy/Crw==` (string, required) - In case of uploading file, its content as Base64 encoded.
    + `url`: `https://www.partner.com/file?id=12345` (string, required) - In case of retrieving file, its URL.

## BaseDocument (object)
Attached document

### Properties
+ type: `CONTRACT` (enum, required) - Type of the document
    + `INVOICE` - Faktura
    + `PROFORMA_INVOICE` - Proforma faktura
    + `CREDIT_NOTE` - Dobropis
    + `OTHER` - Ostatní
    + `SANCTION` - Sankce
    + `ID_CARD_FRONT` - Občanský průkaz - přední strana
    + `ID_CARD_BACK` - Občanský průkaz - zadní strana
    + `PASSPORT_FRONT` - Pas - přední strana
    + `PASSPORT_BACK` - Pas - zadní strana
    + `DRIVING_LICENSE_FRONT` - Řidičský průkaz - přední strana
    + `DRIVING_LICENSE_BACK` - Řidičský průkaz - zadní strana
    + `CONTRACT` - Smlouva
    + `PRECONTRACTUAL_INFORMATION` - Předsmluvní informace
    + `IPID` - IPID
    + `PRESUIT_DEMAND` - Předžalobní výzva
    + `BANK_STATEMENT` - Výpis účtu
    + `PRICE_LIST` - Ceník 
+ description: `This is an document` (string, optional) - File description
+ file (File, required) - Attached file

## ContractDocument (BaseDocument)
Attached document (document only for client, document for specific contract, document for specific order ...)

### Properties
+ name: `Obchodní podmínky` (string, required) - Human-readable localized document name
+ contractNumber: `6707000642` (string, optional) - contractNumber if document is connected to specific contract
+ contractType: `REL` (enum, optional) - contract type if document is connected to specific contract
    + `CEL` - Close End Loan
    + `REL` - Revolving Loan
    + `DEFPAY` - deferred payment
+ additionalData (object, optional)
    + `signatureDate`: `2017-01-18T10:25:00+01:00` (string, optional) - Date and time of signature
    + `statementMonth`: 5 (number, optional) - Number of a month for document type MONTHLY_STATEMENT
    + `statementYear`: 2017 (number, optional) - Year for document type MONTHLY_STATEMENT


## HistoryDocument (object)
Attached document (document only for client, document for specific contract, document for specific order ...)

### Properties
+ name: `Obchodní podmínky` (string, required) - Human-readable localized document name
+ type: `GEN_SMS_SIGN_AGREEMENT` (enum, required) - Type of the document
    + `EKLIENT_AGREEMENT` - Smlouva o pouěŪvŠnŪ aplikace SprŠvce financŪ
    + `INSTALLMENTPROGRAM_AMENDMENT` - Dodatek smlouvy - SplŠtkovť programy
    + `NRKI_CONSENT` - Souhlas s NRKI
    + `SOLUS_CONSENT` - Souhlas se SOLUS
    + `ATTACHMENT` - VyěŠdanż dokument
    + `CONTRACT` - ŕvžrovŠ smlouva
    + `CREDIT_CONDITIONS` - ŕvžrovť podmŪnky
    + `FLIP_SUPPLEMENT` - Dodatek smlouvy - FLIP
    + `BONUS_ACTION` - BonusovŠ akce
    + `PERSONAL_DATA_CONSENT` - Souhlas se zpracovŠnŪm osobnŪch ķdajý
    + `PREAGREEMENT` - PÝedsmluvnŪ formulŠÝ
    + `CARD_HANDOVER` - PÝedŠvacŪ protokol ke kartž
    + `SUPPLEMENT_CLIP` - Dodatek pro navżöenŪ ķvžrovťho rŠmce
    + `REGISTRY_SHEET` - MatriŤnŪ list
    + `ATTACHMENT_NO1` - PÝŪloha Ť.1
    + `ACCEPT_PROT_VEH` - Protokol o pÝevzetŪ vozidla
    + `ORIG_VINCULATION` - OriginŠl VINKULACE (ind. HAV)
    + `INSURANCE_CONTRACT_COPY` - Kopie pojistnť smlouvy
    + `INFO_INSURANCE_COMPANY` - Informace pro klienta-poj. KOOPERATIVA UNIQA
    + `ATTACHMENT_CLIENT` - Dokument k osobž
    + `INSTALMENT_CALENDAR` - SplŠtkovż kalendŠÝ
    + `MONTHLY_STATEMENT` - MžsŪŤnŪ vżpis
    + `GEN_SMS_SIGN_AGREEMENT` - Smlouva o pouěŪvŠnŪ online aplikacŪ
    + `ARBITRATION` - RozhodŤŪ smlouva
    + `INVOICE` - Invoice
    + `PROFORMA_INVOICE` - Proforma invoice
    + `CREDIT_NOTE` - Credit note
    + `OTHER` - OstatnŪ
+ contractNumber: `6707000642` (string, optional) - contractNumber if document is connected to specific contract
+ contractType: `REL` (enum, optional) - contract type if document is connected to specific contract
    + `CEL` - Close End Loan
    + `REL` - Revolving Loan
    + `DEFPAY` - deferred payment
+ file (File, required) - Attached file
+ description: `This is an invoice` (string, optional) - File description
+ additionalData (object, optional)
    + `signatureDate`: `2017-01-18T10:25:00+01:00` (string, optional) - Date and time of signature
    + `statementMonth`: 5 (number, optional) - Number of a month for document type MONTHLY_STATEMENT
    + `statementYear`: 2017 (number, optional) - Year for document type MONTHLY_STATEMENT

## RevolvingLoanDocument (BaseDocument)
+ type: `BANK_STATEMENT` (enum, optional) - Type of the document
    + `BANK_STATEMENT` - Výpis účtu
    + `CONTRACT` - Úvěrová smlouva
    + `PRECONTRACTUAL_INFORMATION` - Předsmluvní informace

## RevolvingTransactionDocument (BaseDocument)
+ type: `REVOLVING_LOAN_FEE` (enum, required) - Type of the document
    + `REVOLVING_LOAN_FEE` - Poplatek za revolvingový úvěr
+ name: `Zjednodušený daňový doklad` (string, required) - Human-readable localized document name

## ExportedFile (BaseDocument)
+ id: `00001ca5-db91-4040-b454-fb5b81c0abb4` (string, required) - UUID of temporary file
+ type: `TRANSACTIONS` (enum, required) - Type of the file
    + `TRANSACTIONS` - Transaction export file
+ expiresAt `2020-01-18T10:34:44+01:00` (string, optional) - Date and time of file availability
+ state: `PROCESSING` (enum, required) - State of file
    + `PROCESSING` - File is being generated
    + `READY` - File is ready to download
+ file (File, optional) - File in predefined format

## DeliveryCarrier (object)
Delivery carrier

### Properties
+ One Of
    + carrierId (enum, required)
        + CZ_POST_HAND - Czech Post, Parcel Delivery to Hand
        + CZ_POST_OFFICE - Czech Post, Parcel Delivery to Post Office
        + CZ_POST_OTHER - Czech Post, other service
        + PPL
        + DPD
        + GEIS
        + IN_TIME
        + TOP_TRANS
        + GEBRUDER_WEISS
        + LOCAL_COURIER
        + TNT
        + GLS
        + HDS_COMFORT
        + HDS_STANDARD
    + carrierCustom: `my custom carrier` (string, required) - For carriers not found in enumeration of customer ID, specify value as text


## ApplicationBase (object)
Financing application base information

### Properties
+ id: `77d665d7-da44-402e-b7f7-6354d6076b32` (string, required) - Unique identifier in HCO
+ state: `PROCESSING` (enum, required) - Application state.
    + `PROCESSING` - Application is being processed by HC
    + `READY` - Application was approved and is ready for financing
    + `REJECTED` - Application was rejected
    + `CANCELLED` - Application was cancelled by client, either before approval or after delivery
+ stateReason: `PROCESSING_APPROVED` (enum, required) - Describes internal state of application, e.g. when state is PROCESSING - reason why application remains in processing state
    + `PROCESSING_ADDITIONAL_DATA` - Additional data needed (redirect to HC or send Application additional data)
    + `PROCESSING_VERIFICATION` - Verification needed (redirect to HC or send Application verification)
    + `PROCESSING_REDIRECT_NEEDED` - Redirect to HC is needed. Redirect user to `gatewayRedirectUrl`.
    + `PROCESSING_NEW` - New application created
    + `PROCESSING_PREAPPROVED` - Preliminary approval by HC
    + `PROCESSING_APPROVED` - Approved by HC, to be signed by client
    + `PROCESSING_REVIEW` - Review in progress
    + `PROCESSING_WAIT_CLIENT` - To be completed by client
    + `PROCESSING_ALT_OFFER` - Alternative offered to client
    + `PROCESSING_SIGNED` - Signed by client, to verification by HC
    + `PROCESSING_VALIDATION_IN_PROGRESS` - Processing, validation in progress
    + `READY_TO_SHIP` - Financing approved, goods ready to be shipped to client
    + `READY_SHIPPED` - Goods shipped to client
    + `READY_DELIVERING` - Verification of goods delivery
    + `READY_DELIVERED` - Goods delivered to client
    + `READY_PAID` - Paid to merchant
    + `READY_TO_PAY` - Ready - to pay
    + `REJECTED` - Rejected by HC
    + `CANCELLED_NOT_PAID` - Cancelled before delivery
    + `CANCELLED_TO_RETURN` - Cancelled after delivery, goods to be returned (not implemented)
    + `CANCELLED_RETURNED` - Cancelled after delivery, goods returned to merchant


## EshopAdditionalInfo (object)
Basic eshop info

### Properties
+ name: `Mall.cz`(string, optional) - marketing name of eshop used in connection with application
+ logoUrl: `https://www.uloziste_obrazku_z_eshop.cz/763a8b72-a081-4baa-9f71-7b41153d5fed` (string, optional) - eshop logo URL if exists otherwise is `null`


## Application (ApplicationBase)
Financing application.

### Properties
+ originBillingId: `378` (string, optional) - id of billing where application was approved at
+ createdDate: `2017-06-15` (string, optional) - date the application was created
+ order (Order, required) - Order data.
+ type: `DEFERRED_PAYMENT` (enum, optional) - Financing type
    + `DEFERRED_PAYMENT` - Pay later ("zaplať později")
+ contractNumber: `01-6010027378` (string, required) - parent contract for this application
+ gatewayRedirectUrl: `https://mallpay.cz?applicationId=0a04ead9-f54b-4cb0-98f4-3baacae9460b` (string, optional) - Gateway redirect URL. Redirect user to this URL to complete this application if state is `PROCESSING` and stateReason is `PROCESSING_ADDITIONAL_DATA` or `PROCESSING_VERIFICATION` or `PROCESSING_REDIRECT_NEEDED`.
+ eshopAdditionalInfo (EshopAdditionalInfo, required) - other information for particular salesroom connected to this application
+ defpayAdditionalInfo (object, optional, nullable) - additional application information for DEFERRED_PAYMENT and TRY_AND_PAY application type
    + `currentDebt` (Amount, required) - Actual debt amount
    + `dueDate`: `2016-11-15` (string, optional, nullable) - date due for DEFERRED_PAYMENT and TRY_AND_PAY
    + `dueDateClient`: `2016-11-14` (string, optional, nullable) - date due comunicated on the client for DEFERRED_PAYMENT and TRY_AND_PAY
    + `currentDpd`: 2 (number, required) - current days past due
    + `completelyPaid`: `true` (boolean, optional, nullable) - information if this application is completely paid and there is no expected payment from client
    + `paymentAvailability` (PaymentAvailability, optional, nullable) - information about possibility to pay application (it could be blocked, f.e. "rozklad odkladu")
    + `rewardsInfo` (RewardsInfo, optional) - information in rewards
+ `paymentDate`: `2017-01-12` (string, optional, nullable) - Date when was order paid
+ `isClosed`: `true` (boolean, required) - application is closed and do not need customer further action

## ApplicationTransaction (object)
+ id: `2070` (string, required) - transaction id
+ amount (Amount, required) - transaction amount customer owes (-) / or receives as a discount (+)
+ type: `DEFERRED_PAYMENT` (enum, required) - finance transaction type related to order
    + `CLAIM_DEFERRED_PAYMENT` - Order
    + `CLAIM_SERVICES` - Service
    + `CLAIM_SANCTION` - Sanction
    + `CUSTOMER_DEFERRED_PAYMENT` - Payment of the order
    + `CUSTOMER_SERVICES` - Service payment
    + `CUSTOMER_SANCTION` - Paid sanction
    + `CUSTOMER_REVOLVING` - Payment of the billing
    + `CUSTOMER_CREDIT_NOTE_DEFERRED_PAYMENT` - Refund of order overpayment to the customer
    + `CUSTOMER_CREDIT_NOTE_SERVICES` - Refund of service overpayment to the customer
    + `CUSTOMER_CREDIT_NOTE_SANCTION` - Refund of sanction overpayment to the customer
    + `CUSTOMER_CREDIT_NOTE_REVOLVING` - Refund of billing overpayment to the customer
    + `REVOLVING_DEBIT_REFINANCING` - Refinancing
    + `DISCOUNT_PROMOCODE` - Promo Code
    + `DISCOUNT_MALLCOIN_SERVICE` - MALL Coin service discount
    + `DISCOUNT_MALLCOIN_FREE_DELIVERY` - MALL Coin free delivery
    + `DISCOUNT_FREE_DELIVERY` - Free Delivery
    + `REVOLVING_CUSTOMER_SANCTION` - Sanction refinance from revolving loan
+ createdDate: `2020-05-20` (string, required) - date, on which transaction was created

## HistoryApplication (ApplicationBase)
Financing application.

### Properties
+ createdDate: `2017-06-15` (string, optional) - date the application was created
+ order (HistoryOrder, required) - Order data.
+ type: `DEFERRED_PAYMENT` (enum, optional) - Financing type
    + `DEFERRED_PAYMENT` - Pay later ("zaplať později")
    + `TRY_AND_PAY` - Vyskoušej a zaplať
+ applicationOrigin (object, optional) - if the application was created based on other application
    + `applicationIds`: `54546` (array[string], required) - application which led to creation of this application
    + `contractNumber`: `1` (string, required) - contract for the application which led to creation of this application
+ eshopAdditionalInfo (EshopAdditionalInfo, required) - other information for particular salesroom connected to this application

## PaymentAvailability (object)
Information about possibility to pay application or billing

### Properties
+ availability (enum, required)
    + `AVAILABLE`
    + `NOT_AVAILABLE`
+ reasons (array[string], optional) - List of reasons.
    Possible values in array: `ALREADY_PAID`, `BLOCKED`, `IN_REVOLVING_PAYMENT_PROCESS`, `BILLING_NOT_CLOSED`


## ReturnUrls (object)
Collection of URLs used for redirection of a customer back to a Self care

### Properties
+ approvedRedirect (string, required) - return URL used for redirection of the customer back to self care after application approval.
+ rejectedRedirect (string, required) - return URL used for redirection of the customer back to self care after application rejection.
+ discontinuationRedirect (string, required) - return URL used for redirection of the customer back to self care in case client doesn't want to finish application process.


## FinancedSubject (object)
Subject of financing

### Properties
+ createdDate: `2016-11-15` (string, optional) - date the order was created
+ number: `AA234` (string, required) - Order number (internal for e-shop)
+ variableSymbols (array[string], optional) - Variable symbols (internal for e-shop)
+ totalPrice (Amount, required) - Total order amount, including VAT
+ broker (Broker, optional) - Additional information about broker application. Required for order types `LIABILITY` and `GOODS_BROKER`


## HistoryFinancedSubject (object)
Subject of financing

### Properties
+ createdDate: `2016-11-15` (string, optional) - date the order was created
+ number: `AA234` (string, required) - Order number (internal for e-shop)
+ variableSymbols (array[string], optional) - Variable symbols (internal for e-shop)
+ totalPrice (HistoryAmount, required) - Total order amount, including VAT
+ broker (Broker, optional) - Additional information about broker application. Required for order types `LIABILITY` and `GOODS_BROKER`


## OrderState (enum)
+ `PROCESSING` - Order is being processed by merchant
+ `SENT` - All order items was sent to customer
+ `DELIVERED` - All order items was delivered to customer
+ `RETURNED` - All order items was returned to merchant
+ `CANCELLED` - Order was fully cancelled

## Order (FinancedSubject)
Detailed information about order (type `GOODS` and `GOODS_BROKER`)

### Properties
+ type: `GOODS` (enum, required) - Order type
    + `GOODS` - Purchase of (physical) goods on eshop
    + `GOODS_BROKER` - Purchase of (physical) goods on eshop mediated by broker. "Deffered payment" or "Try and pay" are some examples of this type of order.
+ totalVat (array[VatAmount], fixed-type, optional) - Total VAT amounts split by their VAT rates
+ promocodeDiscounts (array[Promocode], fixed-type, required) - Promo codes discounts applied on order
+ items (array[Item], fixed-type, required) - Items in order
+ documents (array[ContractDocument], fixed-type, optional) - Attached documents (invoices etc.)
+ state: `PROCESSING` (OrderState, required) - Order state.
+ deliveryCarrier (DeliveryCarrier, optional) - Delivery carrier, when applicable.
+ deliveryDate: `2017-01-18` (string, optional) - Date of delivery
+ deliveryTrackingNumber: `EX12221` (string, optional) - Delivery tracking number
+ sentDate: `2017-01-12` (string, optional) - Date of order shipping


## HistoryOrder (HistoryFinancedSubject)
Detailed information about order (type `GOODS` and `GOODS_BROKER`)

### Properties
+ type: `GOODS` (enum, required) - Order type
    + `GOODS` - Purchase of (physical) goods on eshop
    + `GOODS_BROKER` - Purchase of (physical) goods on eshop mediated by broker. "Deffered payment" or "Try and pay" are some examples of this type of order.
+ totalVat (array[HistoryVatAmount], fixed-type, optional) - Total VAT amounts split by their VAT rates
+ items (array[HistoryItem], fixed-type, required) - Items in order
+ documents (array[HistoryDocument], fixed-type, optional) - Attached documents (invoices etc.)
+ state: `APPROVING` (enum, required) - Order state.
    + `APPROVING`
    + `APPROVED_AND_CONFIRMED`
    + `ONLY_APPROVED`
    + `REJECTED`
    + `ERROR`
    + `MANUAL_VERIFICATION`
    + `CANCELLED`
    + `SENT`
    + `RETURNED`
    + `DELIVERED`
+ deliveryCarrier (DeliveryCarrier, optional) - Delivery carrier, when applicable.
+ deliveryDate: `2017-01-18` (string, optional, nullable) - Date of delivery
+ deliveryTrackingNumber: `EX12221` (string, optional, nullable) - Delivery tracking number
+ sentDate: `2017-01-12` (string, optional, nullable) - Date of order shipping


## Item (object)
Order item information, needed to create an application.

### Properties
+ `id`: `item-id-string` (string, required) - Item Id
+ `name`: `iPhone 6s 32GB SpaceGray` (string, required) - Item name
+ `totalPrice` (Amount, required) - Total price for all pieces, VAT inclusive (if applicable)
+ `image` (File, optional) - Item image
+ `code`: `EXC4677-1a` (string, optional) - Internal code for item (internal to e-shop). Used to better identify the item for future changes
+ `quantity`: 1 (number, optional) - Item quantity. If empty, considered as 1.
+ `type` (enum, optional) - Item type
    + `PHYSICAL`
    + `DISCOUNT`
    + `SHIPPING_FEE`
    + `SALES_TAX`
    + `DIGITAL`
    + `GIFT_CARD`
    + `STORE_CREDIT`
    + `FEE`
    + `INSURANCE`
+ `ean`: `888462064002` (string, optional) - EAN code.
+ `variant`: `32GB SpaceGray` (string, optional) - Item variant
+ `description`: `Mobile phone with 32GB of RAM` (string, optional)
+ `producer`: `Apple` (string, optional)
+ `unitPrice` (Amount, optional) - Price per one piece. If empty, automatically considered that `unitPrice` is `totalPrice` / `quantity`.
+ `unitVat` (VatAmount, optional) - VAT amount per one piece. If empty, automatically considered that `unitVat` is `totalVat` / `quantity`.
+ `totalVat` (VatAmount, optional) - Total VAT amount for all pieces
+ `productUrl`: `https://www.example.com?itemId=10` (string, optional) - URL of the item in e-shop
+ `state`: `PROCESSING` (enum, required) - Order state.
    + `PROCESSING` - Order item delivery is being processed by merchant
    + `SENT` - Items was sent to customer
    + `DELIVERED` - Order item was delivered to customer
    + `RETURNED` - Order item was returned to merchant
    + `CANCELLED` - Order item was cancelled
+ `sentDate`: `2017-01-12` (string, optional) - Date when item was sent. Only when the whole order was NOT sent at once.
+ `deliveryDate`: `2017-01-12` (string, optional) - Date when item was delivered. Only when the whole order was NOT sent at once.
+ `deliveryTrackingNumber`: `EX21121` (string, optional) - Tracking number for the item. Only when the whole order was NOT sent at once.
+ `services` (array[Service]) - insurance services objects for item
+ `rewards` (array[Reward], fixed-type, optional, nullable) - rewards purchasable for order item


## HistoryItem (object)
Order item information, needed to create an application.

### Properties
+ `name`: `iPhone 6s 32GB SpaceGray` (string, required) - Item name
+ `totalPrice` (HistoryAmount, required) - Total price for all pieces, VAT inclusive (if applicable)
+ `image` (File, optional) - Item image
+ `code`: `EXC4677-1a` (string, optional) - Internal code for item (internal to e-shop). Used to better identify the item for future changes
+ `quantity`: 1 (number, optional) - Item quantity. If empty, considered as 1.
+ `type` (enum, optional) - Item type
    + `PHYSICAL`
    + `DISCOUNT`
    + `SHIPPING_FEE`
    + `SALES_TAX`
    + `DIGITAL`
    + `GIFT_CARD`
    + `STORE_CREDIT`
    + `FEE`
    + `INSURANCE`
+ `ean`: `888462064002` (string, optional) - EAN code.
+ `variant`: `32GB SpaceGray` (string, optional) - Item variant
+ `description`: `Mobile phone with 32GB of RAM` (string, optional)
+ `producer`: `Apple` (string, optional)
+ `unitPrice` (HistoryAmount, optional, nullable) - Price per one piece. If empty, automatically considered that `unitPrice` is `totalPrice` / `quantity`.
+ `unitVat` (HistoryVatAmount, optional, nullable) - VAT amount per one piece. If empty, automatically considered that `unitVat` is `totalVat` / `quantity`.
+ `totalVat` (HistoryVatAmount, optional, nullable) - Total VAT amount for all pieces
+ `productUrl`: `https://www.example.com?itemId=10` (string, optional) - URL of the item in e-shop
+ `state`: `PROCESSING` (enum, required) - Order state.
    + `PROCESSING` - Order item delivery is being processed by merchant
    + `SENT` - Items was sent to customer
    + `DELIVERED` - Order item was delivered to customer
    + `RETURNED` - Order item was returned to merchant
    + `CANCELLED` - Order item was cancelled
+ `sentDate`: `2017-01-12` (string, optional, nullable) - Date when item was sent. Only when the whole order was NOT sent at once.
+ `deliveryDate`: `2017-01-12` (string, optional, nullable) - Date when item was delivered. Only when the whole order was NOT sent at once.
+ `deliveryTrackingNumber`: `EX21121` (string, optional, nullable) - Tracking number for the item. Only when the whole order was NOT sent at once.


## Service (object)
MIA Service object

### Properties
+ `id`: `service-01` (string, required) - service Id
+ `slug`: `service-slug` (string, required) - service slug
+ `state`: OFFERED (enum, required) - status of service
    + `OFFERED`
    + `WAITING_PAYMENT`
    + `ACTIVE`
    + `CANCELLED`
+ `priority`: 1 (number, optional) - priority of service
+ `price` (Amount, required) - Price of service
+ `groupSlug`: `ADVANCED_DAMAGE_PROTECTION` (string, required)
+ `excludesIds` (array[string]) - list of service IDs this service is mutually exclusive with
+ `extraData`
    + `reportDamageURL`: `https://example.com/reportdamage` (string, optional)

## Consent (object)
Consent subscription object

### Properties
+ slug: `MARKETING_EXTENDED` (enum, required) - slug of consents user is able to subscribe or unsubscribe
    + `MARKETING`
    + `MARKETING_EXTENDED`
+ isSubscribed: `true` (boolean, required) - true if user is subscribed to consents with given slug


## Broker (object)
Additional information about broker application

### Properties
+ `applicationId`: `02-a1345` (string, required) - Broker application ID (`KNJapplicationId`)
+ `receivableDueDate`: `2017-01-10` (string, optional) - Expected due date. Required for order type `GOODS_BROKER`


## Insurance (object)
+ id: `12345` (string, required) - insurance identificator
+ type: `LIFE_INSURANCE` (enum, required) - type of insurance service
   + `LIFE_INSURANCE` - life insurance service
   + `GOODS_INSURANCE` - goods insurance service
+ code: `LI_AAA` (string, required) - code of insurance service
+ name: `AAA Credit Life Insurance` (string, required) - name of insurance service
+ validFrom: `2017-01-01` (string, optional) - insurance validity from date
+ validTo: `2017-12-31` (string, optional) - insurance validity from to
+ fee (Amount, optional) - total insurance fee
+ insuredSum (Amount, optional) - total insured sum


## Installment (object)
Revolving loan installment

### Properties
+ installmentNumber: `108` (number, required) - the rank of installment in installment schedule (if available), unique number for specific contract
+ type: `STANDARD` (enum, required) - type of the installment
   + `STANDARD` - regular installment
   + `EXTRAORDINARY` - extraordinary installment
   + `PARTIAL_CANCELLATION` - partial cancellation (special debit transaction)
   + `OTHER` - other values
+ dueDate: `2016-11-15` (string, required) - installment date due
+ dueDateClient: `2016-11-14` (string, optional) - installment date due comunicated on the client
+ dueAmount (Amount, required) - installment amount due to be paid by dueDate
+ daysPastDue (number, optional) - days past due
+ daysPastDueClient (number, optional) - days past due comunicated on client
+ installmentDatePaid: `2016-11-15` (string, optional) - date paid for the installment (when the installment was completely paid)
+ installmentAmountPaid (Amount, optional) - amount paid for the installment amount due
+ installmentDetail (object, optional) - detail of `STANDARD` installment (connected with installment program)
   + `name` (string, required) - item (installment program) description
   + `idTransaction`: `1234567890` (number, required) - reference to related transaction
+ installmentItems (array[InstallmentItem], fixed-type, required) - array of particular installment items


## InstallmentItem (object)
Revolving loan installment item

### Properties
+ installmentItemNumber: 4 (number, optional) - the rank of installment item within installment, unique number for specific installment
+ itemType: `MIN_INSTALLMENT` (enum, required) - type of the installment item
   + `MIN_INSTALLMENT` - minimal installment (four percent of credit balance debt)
   + `INSTALLMENT_PROGRAM` - installment program (one-click purchase etc.)
   + `PRINCIPAL` - principal
   + `INTEREST` - interest
+ itemDueAmount (Amount, required) - installment item amount due
+ itemDatePaid: `2016-11-15` (string, optional) - date paid for the installment item (when the installment item was completely paid)
+ itemAmountPaid (Amount, optional) - amount paid for the installment item amount due
+ itemDetail (object, optional) - detail of `INSTALLMENT_PROGRAM` item
   + `name`: `NŠkup na splŠtky` (string, required) - item (installment program) description
   + `idTransaction`: 1234567890 (number, required) - reference to related transaction
   + `applicationId` (ApplicationId, optional) - reference to related application (if available)


## InstallmentProgram (object)
Purchase transormed into installments

### Properties
+ `installmentProgramId`: `14456` (string, required) - installment program identificator
+ `createdDate`: `2016-11-15` (string, required) - installment program created date
+ `programType`: `PURCHASE_INSTALLMENT` (enum, required) - installment program type
  + `PURCHASE_INSTALLMENT`
  + `TENTH`
  + `AUTOMATIC`
  + `CASH_ON_CARD`
  + `CONSOLIDATION`
+ `name` (string, optional) - installment program description
+ `amount` (Amount, required)  installment program total amount (purchase amount)
+ `completelyPaid`: `false` (boolean, required) - installment program "completely paid" flag
+ `annuity` (Amount, required) - installment amount
+ `numberOfInstallments`: 10 (number, required) - number of installments
+ `remainingInstallments`: 4 (number, required) - number of remaining (not completely paid) installments
+ `paidInstallments`: 6 (number, required) - number of completely paid installments
+ `paidTotal` (Amount, required) - sum of completely paid installments
+ `annualInterestRate`: 12.9 (number, required) - annual interest rate
+ `annualPercentageRate`: 18.3 (number, required) - annual percentage rate of charge (RPSN in Czech)
+ `overpayment` (Amount, optional) - amount of overpayment
+ `lastInstallmentDate`: `2018-11-20` (string, optional) - date of the last installment of installment calendar (may not be available when related contract is paid off)
+ `state`: `ACTIVE` (enum, required) - installment program state
  + `ACTIVE`
  + `CANCELLED`
  + `INVALID`


## ApplicationId (object)
+ `contractNumber`: `01-123456789` (string, required) - contract number
+ `applicationId`: `112334556` (string, required) - application identifier

## PaymentItem (object)
+ `contractNumber`: `01-123456789` (string, required) - applications respective contract or a contract to be repaid as a whole
+ `applicationIds` (array[string], fixed-type, optional) - list of applications to be repaid

## PaymentRequest (object)
+ One Of
    + `applicationIds` (array[string], optional) - list of applications to be paid
    + `billingIds` (array[string], optional) - list of billings to be paid
    + `items` (array[PaymentItem], fixed-type, optional) - list of payment items to be paid - OBSOLETE - will be removed after releasing the new version of mobile app.
+ `value` (Amount, optional) - amount of requested payment
+ `method`: `TRANSFER` (enum, required) - payment method
    + `TRANSFER` - money transfer
    + `CARD` - card payment
    + `SAZKA` - payment by Sazka - currently turned off
    + `PLATBA24` - Ceska Sporitelna online payment
    + `MOJE_PLATBA` - Komercni Banka online payment
    + `EKONTO` - Raiffeisen online payment
+ `redirectUrls` (MerchantUrls, optional) - Collection of URLs used for redirection of a customer back to an application, based on payment result. Only usefull for method=`CARD`


## DomesticPaymentOrder (object)
+ `value` (Amount, required) - amount & currency of payment order
+ `partyAccount` (AccountNumber, required) - party account number
+ `dueDate`: `2018-01-22` (string, optional) - payment order due date
+ `payeeMessage`: `Lorem ipsum dolor sit amet, consectetur adipiscing elit.` (string, optional) - message for payee
+ `payerMessage`: `Mauris mollis justo neque, ac iaculis erat lacinia vel.` (string, optional) - message for payer
+ `additionalInfo` (MoneyTransactionInfoDomestic, optional) - payment order additional info (symbols)
+ `qrCode` (File, required) - payment QR code (SPAYD)

## DomesticPaymentOrderStatus (DomesticPaymentOrder)
+ `id` (string, required) - payment order ID
+ `status` (enum[string], required) - status of the payment
    + `PREPARED` - payment order has been prepared
    + `PAID` - payment has been received
    + `CANCELLED` - cancelled payment order, TBD do we need this?

## OnlinePaymentOrder (object)
+ `id` (string, required) - payment order ID
+ `gatewayRedirectUrl` (string, required) - gateway redirect URL. Redirect user to this URL to complete the online payment order.


## MerchantUrls (object)
Collection of URLs used for redirection of a customer back to a partner website or as a notification endpoint

### Properties
+ `approvedRedirect`: `https://slip.hc.cz/payment/success` (string, required) - URL of the originating application (e.g. SLIP) used for redirection of the customer back to partner website (from HCO gateway) after application approval.
+ `rejectedRedirect`: `https://slip.hc.cz/payment/failure` (string, required) - URL of the originating application used for redirection of the customer back to partner website (from HCO gateway) after application rejection.


## ChangeFinancingRequest (object)
!!! Final Warning (30.10.): Will be deleted in next iteration

### Properties
+ applicationIds: `123`,`456` (array[string], required) - Application identifiers to be re-financed
+ `merchantUrls` (MerchantUrls, required) - Collection of partner's URLs used for redirection of a customer back to a partner website or as a notification endpoint
+ financingType: `INSTALLMENT` (enum[string], required) - Requested financing type
    + `INSTALLMENT` - Financing as installment program
    + `REL_BALANCE` - Not supported yet
+ `settingsInstallment` (object, optional) - Settings for INSTALLMENT financing type. Fill in if calculation preceeded financing request.
    + `preferredMonths`: 10 (number, optional) - Preferred number of installments (in months)
    + `preferredInstallment` (Amount, optional) - Preferred repayment amount
    + `preferredDownPayment` (Amount, optional) - Preferred downpayment amount (amount should be rounded to hundreds)
    + `productCode`: `a122ax` (string, optional) - Product code, this indicates previous calculation result
    + `productSetCode`: `bc11523` (string, optional) - Product set code, this will limit further calculations


## Authorization (object)
+ blockedUntil: `2017-01-18T10:34:44+01:00` (string, optional) - requested operation is blocked until specified time


## InstallmentProgramsCalculationsRequest (object)
+ `productSetCode`: `bc11523` (string, optional) - Product set code, this will limit further calculations. If not provided, default productSet will be used.
+ `price` (Amount, required) - Payment value
+ `downPayment` (Amount, optional) - Down payment amount (default is 0, amount should be rounded to hundreds)


## InstallmentProgramCalculationRequest (object)
+ `productCode`: `a122ax` (string, required) - Product code, this indicates previous calculation result
+ `price` (Amount, required) - Payment value
+ `downPayment` (Amount, optional) - Down payment amount (default is 0, amount should be rounded to hundreds)

## InstallmentProgramsCalculations (object)
+ `calculations` (array[InstallmentProgramCalculation], fixed-type, required) - Array with installment programs calculations

## InstallmentProgramCalculation (object)
+ `productCode`: `a122ax` (string, required) - Installment program product code
+ `type` (enum, optional) - Program type
    + MINIMAL - Lowest installment
    + FAVOURITE - Recommended (favourite) installment program
    + OTHER - Other
+ `installment` (Amount, optional) - monthly installment amount
+ `numberOfInstallments`: 10 (number, optional) - installment count
+ `detail` (InstalmentProgramOfferDetail, optional)
    Calculation detailed information.
    Only available for calculations received by calling `POST /calculation`
    Not available for `POST /calculations/`

## InstalmentProgramOfferDetail (object)
+ `installmentDay`: 20 (number, optional) - Installment date (day in month)
+ `installmentFirstDate`: `2017-05-20` (string, optional) - Date of the first installment
+ `installmentLastDate`: `2018-03-20` (string, optional) - Date of the last installment
+ `annualInterestRate`: 0.17 (number, optional) - Annual interest rate
+ `predictedProvisionDate`: `2017-05-20` (string, optional) - Predicted provision date
+ `paidBack` (Amount, optional) - Total amount paid by customer
+ `rpsn`: 0.23 (number, optional) - RPSN
+ `legalline`: "Uvedenť hodnoty jsou spoŤŪtŠny k datu poskytnutŪ 18.1.2017, datu 1. splŠtky 20.1.2017 a se splatnostŪ vöech dalöŪch splŠtek k 20. dni v mžsŪci poŤŪtaje 20.1.2017. NejednŠ se o nabŪdku Ťi veÝejnou nabŪdku. PlatŪ pÝi splnžnŪ podmŪnek Home Credit...." (string, optional) - Text interpretation of the offer

## CredentialChangeRequest (object)
+ username: `memyself@mine.com` (string, required) - client's self care zone username
+ `type` (enum, required) - Type of credential change
    + LOGIN - Login Change
    + PWD - Password Change
+ `returnUri`: `https://www.partner.com/file?id=12345` (string, required)

## CredentialChangeResponse (object)
+ `redirectUrl`: `https://mallpay.cz/change-complete` (string, required) - URL where the client should be redirected after successfull creation of application.

## CustomerLogin (object)
### Properties
+ One of
    + Properties
        + `username`: `john.doe@yahoo.com` (string, required) - Customer's e-mail address
        + `password`: `secretpassword1234` (string, required) - Customer's password
    + facebookAccessToken: `EAADcxbT9khgBAHkik7JGjl9ZCDsiV1TyWpVg4hpV6pUokIxYNPfxksp8S0lxAQz22hqehZBxKDxbZARvsfO9foUxj7uq5gGP3j7aLDCu9ZA9VjSobUU4UdadQUMHtxE2wv1uXxnSnST1SPjDi848VWrXQPkBolceCK5IWUvetVRttwdPrua4N1kVtB6V5uIZD` (string, required) - Facebook user access token.
    + Properties
        + `deviceUuid`: `deviceuuid123456789` (string, required) - Device UUID
        + `mobileToken`: `secretToken123456` (string, required) - Mobile login token


## CustomerLoginResult (object)
### Properties
+ `accessToken`: `6ca0a5f2cb1f5bf1e15259e7689114fa` (string) - Access token
+ `expiresIn`: 7200 (number) - Token validity remaining time (in seconds)

## CustomerMobileTokenResult (object)
### Properties
+ `mobileToken`: `6ca0a5f2cb1f5bf1e15259e7689114fa` (string) - Mobile login token

## Subfield (object)
### Properties
+ `required`: `false` (boolean) - if answer is required
+ `type`: `textarea` (string) - ui widget
+ `choices`: `1, 2, 3` (array[string]) - choices for example for radioselect

## Question (object)
### Properties
+ `name`: `q1` (string) - question name
+ `required`: `false` (boolean) - if answer is required
+ `type`: `textarea` (string) - ui widget
+ `label`: `Proč jste hodnotil/a právě touto známkou?` (string) - question text
+ `choices`: `1, 2, 3` (array[string]) - choices for example for radioselect
+ `fields` (array[Subfield]) - question subfields


## Notification (object)
+ `id`: `45688987` (string, required) - Notification ID
+ `createdDate` : `2017-01-18T10:34:44+01:00` (string) - Date and time of notification creation
+ `title`: `Order has been cancelled` (string) - Title of the notification
+ `text`: `Your order no.4566221 has been cancelled` (string, optional) - Text of the notification
+ `triggerActionUrl`: `http://someurl.com/` (string, optional) - URL user should be redirected to, when he triggers the notification (i.e. when he clicks/taps it).
+ `isRead`: `true` (boolean) - Flag indicating that user has seen the notification.
+ `isTriggered`: `true` (boolean) - Flag indicating that user has interacted with the notification (e.g. clicked/tapped on it)
+ `slug`: `order-cancelled` (string, optional) - Notification template slug.
+ `relatedData` (RelatedDataObject, optional) - Related objects.


## PushNotificationDeviceToken (object)
Customer's device for receiving push notifications.

### Properties
+ `type` (enum, required) - Type of the device
    + `ANDROID`
    + `IOS`
+ `token` (string, required) - Actual token of the device

## CoinAmount (Amount)
### Properties
+ `currency`: `XXX` (string, required) - Coin currency. Used `XXX` for MALL Coins.  [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)

## BasicPartnerPromocodeOffer (object)
Promocode offer - voucher offered to customer

### Properties
+ id: `10` (string, required) - Id of offer
+ title: `promocode-title` (string, required) - Offer title
+ description (string, required) - Offer description
+ coinsRequired (CoinAmount, required) - Price of offer in MALL Coins
+ validFrom: `2019-01-18T10:34:44+01:00` (string, required) - The offer is valid from this datetime
+ validTo: `2010-01-18T10:34:44+01:00` (string, required) - The offer is valid until this datetime
+ priority: 100 (number, required) - Priority of offer in a list of offers
+ createdAt: `2017-01-18T10:34:44+01:00` (string, required) - When was the offer created
+ productImages (array[File], required) - Images for the offer
+ productPriceNonDiscounted (Amount, optional, nullable) - Display original non-discounted price
+ productPriceDiscounted (Amount, optional, nullable) - Display discounted price
+ hyperlink (Hyperlink, required) - URL of offer page description or similar information
+ productUrl: `https://www.example.com/product_offer/10` (string, optional, nullable) - URL of offer page description or similar information
+ voucherValidFrom: `2019-01-18T10:34:44+01:00` (string, optional, nullable) - Display info about voucher validity - starting datetime
+ voucherValidUntil: `2020-01-18T10:34:44+01:00` (string, optional, nullable) - Display info about voucher validity - ending info
+ descriptionShort: `Sleva 55%` (string, optional, nullable) - Display short info about a value of the voucher
+ isLogoDisplayed (boolean, required) - `true` if partner logo should be displayed
+ eshopAdditionalInfo (BasePartner, required) - Display info about partner
+ usageDescription: `Code can be used by following the steps below: - step 1 - step 2` (string, required) - Display info about how to use the external promocode
+ termOfUse: `The code is valid for all purchases above 500,- CZK.` (string, required) - Terms, which must be fullfilled, to be able to use the promocode
+ categories (array[PartnerPromocodeCategory], required) - information about categories, which a promocode offer belongs to
+ isPopular (boolean, required) - represents first best selling active promocode offers (offers, which has the higher number of purchased promocode keys)
+ isNew (boolean, required) - indicates, whether the offer should be labelled as "new"


## PurchasedPartnerPromocodeOffer (object)
Promocode offer purchased by a customer

### Properties
+ id: `10` (string, required) - Id of purchased key
+ purchasedAt: `2020-05-18T10:34:44+01:00` (string, required) - Date of purchase
+ purchasedKey: `ABCD-offer-987654` (string, required) - Customer purchase usable key of the offer (what thecustomer uses to get a discount)
+ offer (BasicPartnerPromocodeOffer, required) - Offer the key is based on

## BasePartner (object)
Basic partner data.

### Properties
+ id: `10` (string, required) - Id of partner data
+ name: `Mall.cz` (string, required) - partner marketing name
+ logo: (File, required) - partner logo

## Partner (BasePartner)
General partner data, where partner can be internal partner offering deferred payment, partner offering services as well as external partner offering promocode.

### Properties
+ url (string, required) - partner link
+ categories (array[PartnerCategory], required)  - list of partners categories
+ promotionImage (File, optional) - partner logo for display on background
+ isOfferingDeferredPayment (boolean, required) - `true` if partner offers deferred payment
+ isOfferingServices (boolean, required) - `true` if partner offers services
+ promocodeOfferState (enum, required)
    + `IN_OFFER` - partner offers at the moment at least one active promocode offer
    + `WAS_OFFERED`- partner does not offer at the moment any promocode offer, but had at least one promocode offer in the past
    + `NEVER_OFFERED` - partner does not provide promocode offers at all


## PartnerCategory (object)

### Properties
+ id: `5` (string, required) - Id of partner category
+ name: `Móda` (string, required) - partner category name

## PartnerPromocodeCategory (object)

### Properties
+ id: `10` (string, required) - Id of partner promocode category
+ name: `Elektronika` (string, required) - partner promocode category name

## MobileApplicationRating (object)
Mobile application rating

### Properties
+ appVersion: `3.29.0` (string, optional) - Release version rating relates to
+ comment: `Aplikace se občas sekne a je třeba restartovat.` (string, optional) - Additional comment to rating
+ deviceInfo (object, optional) - Additional information about customer's device
    + browser: `Chrome Mobile WebView 79.0.3945` (string, optional) - Browser type and version
    + device: `Huawei DRA-L21` (string, optional) - Device name
    + os: `Android 9` (string, optional) - OS type and version
+ rating: 7 (number, required) - Application rating value between 1-10

## ReferralCodeStats
Statistics of customer's referral promo code.

### Properties
+ fullName (string, required) - name of customer
+ registeredWithKey (string, optional, nullable) - promo code key of referrer which was used during customer's registration
+ isKeyRegisteredWithApplicable (boolean, required) - `true` if `registeredWithKey` is still applicable as a discount on order, i.e. not expired or usage depleted. Otherwise it's `false`.
+ key (string, required) - key of customer's promo code
+ discount (Amount, required) - referee's discount of order total value after promo code application
+ maxUsage (number, required) - how many referees can use the referral promo code in total
+ used (number, required) - how many referees already used the referral promo code
+ remainingUsage (number, required) - how many referees can still apply the promo code from now
+ totalSaved (Amount, required) - how much money referees saved in total because of the application of the referral promo code to their orders
+ totalRewardsOutstanding (Amount, required) - how much money could referees save in total when they apply referral promo code to their orders

## ReferralRewardCodesReceived
Rewards the customer received from all the referees (new customers referred).

### Properties
+ key (string, required) - key of referral promo code
+ state (enum, required) - state of referral promo code
    + `USED` - referral promo code was already applied on order
    + `ACTIVE` - referral promo code is applicable on order
    + `EXPIRED` - referral promo code is expired and not applicable on order
+ discount (Amount, required) - discount of order total value after promo code application
+ fullName (string, required) - name of referee
+ receivedDate: `2014-02-10` (string, required) - the date when referee paid the order and the reward was received
+ expirationDate: `2014-04-10` (string, required) - to which date is the referral key applicable on order

## RelatedDataObject (object)
### Properties
+ application (Application, optional, nullable) - Related Application
+ purchasedPartnerPromocodeOffer (PurchasedPartnerPromocodeOffer, optional, nullable) - customer purchased external promocode key with offer info

## CoinTransaction (Transaction)
Detail of customer's Mall Coin transaction

### Properties
+ value (CoinAmount, required) - amount of coins moved in the transaction
+ transactionReason (enum, required) - reason for creating the transaction
    + `APP_DOWNLOAD_BONUS` - Coins were received as a bonus for app download
    + `CUSTOMER_COMPENSATION` - Coins were received as customer compensation
    + `DELIVERY_DISCOUNT` - Coins were spent on delivery discount
    + `EXPIRATION` - Coins were expired
    + `MONTHLY_BILLING_PAID` - Coins were received for payment of monthly billing
    + `ORDER_PAID` - Coins were received for order payment
    + `OTHER` - Coins were received for other reason
    + `PAID_ITEM_RETURNED` - Coins removal for returned order item
    + `SERVICES_DISCOUNT` - Coins were spent on services discount
    + `VOUCHER_ACQUISITION` - Coins were spent on voucher acquisition
+ `relatedData` (RelatedDataObject, optional, nullable) - data and objects related to the MALL Coin transaction
+ remainingValue (CoinAmount, optional) - amount of remaining (unused) coins; the value is always `null` for debit transactions
+ expirationDate: `2020-06-30` (string, optional) - expiration date; the value is always `null` for debit transactions


## EarliestCoinsExpiration (object)

### Properties
+ date: `2020-06-30` (string, optional) - nearest expiration date of coins
+ sum: 9000 (CoinAmount, optional) - nearest expiration sum of coins


## PromoBanner (object)
Promo banner description

### Properties
+ promoBanner
    + mobileImage (File, nullable) - banner image for mobile devices
    + desktopImage (File, nullable) - banner image for desktop
    + linkUrl: `https://link-example.com` (string, nullable) - if either `mobileImage` or `desktopImage` is not null, linkUrl is compulsory
    + googleAnalyticsEact: `eAct string` (string, nullable) - eAct string for Google Analytics. Either both eAct and eLab are filled in or none of those two fields is filled in.
    + googleAnalyticsElab: `eLab string` (string, nullable) - eLab string for Google Analytics. Either both eAct and eLab are filled in or none of those two fields is filled in.

## Reward (object)
Reward description

### Properties
+ `name`: `Doprava zdarma` (string, optional, nullable) - Displayable name of the discount
+ `coins` (CoinAmount, required) - how much the reward will cost or did cost
+ `discount` (Amount, optional, nullable) - how much did the customer save in his currency
+ `type` (enum, required) - type of reward
    + `FREE_DELIVERY`
    + `SERVICE_DISCOUNT`
+ `isPurchased` (boolean, required) - flag for already purchased rewards
+ `relatedObjects` (enum)
    + serviceId (string, optional, nullable)

## RewardsInfo (object)

### Properties
+ `coinsPromised` (CoinAmount, required) - how much coins will customer get after paying for his order
+ `coinsGained` (CoinAmount, required) - how much coins did customer gain after paying his order

## PaymentCard (object)
Contract Payment Card (virtual or physical)

### Properties
+ `id`: `10` (string, required) - unique id of the card in the system
+ `maskedPan`: `123456******1234` (string, optional) - masked PAN of the card. Will be set to `null` if we don't know the card's number or card is in state `ASSIGNED` (due to security reasons).
+ `firstName`: `Franta` (string, required) - first name of the cardholder
+ `lastName`: `Tester` (string, required) - last name of the cardholder
+ `validThru`: `05/36` (string, optional) - card expiration in standard card format (dd/yy).
+ `state`: `ACTIVATED` (enum, required) - status of the card
    + `ASSIGNED` - card has been assigned to contract but has not yet been activated
    + `ACTIVATED` - card has been assigned and activated by cardholder
    + `BLOCKED_TEMPORARILY` - the card has been temporarily blocked. This state is reversible.
    + `BLOCKED_PERMANENTLY` - the card has been permanently blocked. This state is irreversible and requires corresponding `stateReason`.
    + `OTHER` - the card is in an unexpected or other state
+ `stateChangedAt`: `2017-01-18T10:34:44+01:00` (string, optional) - Date and time of last change of state
+ `stateReason`: `LOST` (enum, optional) - reason of the status, for example reason for blocking the card. Some states (not activated etc.) don't require explicit reason. Permanent blocking always requires the reason.
    + `LOST` - card was lost (used for BLOCKED_PERMANENTLY card)
    + `STOLEN` - card was stolen (used for BLOCKED_PERMANENTLY card)
    + `FRAUD` - a fraud was committed using a payment card (used for BLOCKED_PERMANENTLY card)
    + `WRONG_PIN` - customer had 3 wrong PIN tries (used for BLOCKED_TEMPORARILY card)
+ `onlinePaymentsEnabled`: true (boolean, required) - Are online payments enabled? Note that if this is enabled it also implies a fixed preset single transaction amount limit.
+ `atmWithdrawalEnabled`: true (boolean, required) - Are cash withdrawals from ATMs enabled? Note that if this is enabled it also implies a fixed preset maximum withdrawal amount limit.
+ `canShowPin`: true (boolean, optional) - Is card in a state that allows retrieval of customer PIN?

## PaymentCardTemporaryBlocking (object)
Data required to temporary block a card.

### Properties
+ `state`: `BLOCKED_TEMPORARILY` (enum, required)
    + `BLOCKED_TEMPORARILY`

## PaymentCardPermanentBlocking (PaymentCardTemporaryBlocking)
Data required to permanently block a card.

### Properties
+ `state`: `BLOCKED_PERMANENTLY` (enum, required)
    + `BLOCKED_PERMANENTLY`
+ `stateReason`: `STOLEN` (enum, required) - reason for blocking the card
    + `LOST` - card was lost
    + `STOLEN` - card was stolen
    + `FRAUD` - a fraud was committed using a payment card
+ `deliveryAddress` (Address, nullable) - Address where the new card should be delivered. It is assumed (and checked) that the addressType will be of type `DELIVERY`.

## SupportRequest (object)
Request support by phone object

### Properties
+ phoneNumber: `604 644 989` (string, required) - phone number we should call with the support
+ type: `REVOLVING_LOAN` (enum, required) - type of support required
    + REVOLVING_LOAN

## Hyperlink (object)
URL link with displayed text

### Properties
  + url (string, required) - URL link
  + text (string, optional) - display text for URL link
